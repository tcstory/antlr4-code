// Generated from Java.g4 by ANTLR 4.13.0
// jshint ignore: start
import antlr4 from 'antlr4';
import JavaListener from './JavaListener.js';
const serializedATN = [4,1,101,1294,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,1,0,3,0,220,8,0,1,0,5,0,223,8,0,10,0,
12,0,226,9,0,1,0,5,0,229,8,0,10,0,12,0,232,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,
2,1,2,3,2,242,8,2,1,2,1,2,1,2,3,2,247,8,2,1,2,1,2,1,3,5,3,252,8,3,10,3,12,
3,255,9,3,1,3,1,3,1,3,3,3,260,8,3,1,3,3,3,263,8,3,1,4,1,4,1,4,3,4,268,8,
4,1,4,1,4,3,4,272,8,4,1,4,1,4,3,4,276,8,4,1,4,1,4,1,5,1,5,1,5,1,5,3,5,284,
8,5,1,5,1,5,1,6,1,6,3,6,290,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,300,
8,7,1,8,5,8,303,8,8,10,8,12,8,306,9,8,1,9,1,9,1,9,1,9,5,9,312,8,9,10,9,12,
9,315,9,9,1,9,1,9,1,10,1,10,1,10,3,10,322,8,10,1,11,1,11,1,11,5,11,327,8,
11,10,11,12,11,330,9,11,1,12,1,12,3,12,334,8,12,1,12,3,12,337,8,12,1,12,
3,12,340,8,12,1,12,1,12,1,13,1,13,1,13,5,13,347,8,13,10,13,12,13,350,9,13,
1,14,3,14,353,8,14,1,14,1,14,3,14,357,8,14,1,14,3,14,360,8,14,1,15,1,15,
5,15,364,8,15,10,15,12,15,367,9,15,1,16,1,16,1,16,3,16,372,8,16,1,16,1,16,
3,16,376,8,16,1,16,1,16,1,17,1,17,1,17,5,17,383,8,17,10,17,12,17,386,9,17,
1,18,1,18,5,18,390,8,18,10,18,12,18,393,9,18,1,18,1,18,1,19,1,19,5,19,399,
8,19,10,19,12,19,402,9,19,1,19,1,19,1,20,1,20,3,20,408,8,20,1,20,1,20,1,
20,1,20,3,20,414,8,20,1,21,1,21,1,21,1,21,1,21,1,21,3,21,422,8,21,1,22,1,
22,1,22,1,22,1,22,5,22,429,8,22,10,22,12,22,432,9,22,1,22,1,22,1,22,1,22,
1,22,1,22,1,22,3,22,441,8,22,1,23,1,23,3,23,445,8,23,1,23,1,23,3,23,449,
8,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,3,26,459,8,26,1,26,1,26,1,26,
1,26,3,26,465,8,26,1,26,1,26,1,27,1,27,1,27,1,27,3,27,473,8,27,1,28,1,28,
1,28,1,28,1,28,1,28,1,28,3,28,482,8,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,
1,30,3,30,492,8,30,1,31,1,31,1,31,3,31,497,8,31,1,31,1,31,3,31,501,8,31,
1,32,1,32,1,32,5,32,506,8,32,10,32,12,32,509,9,32,1,32,1,32,3,32,513,8,32,
1,32,1,32,1,33,1,33,1,33,3,33,520,8,33,1,33,1,33,1,33,1,34,1,34,1,34,3,34,
528,8,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,5,36,538,8,36,10,36,12,
36,541,9,36,1,37,1,37,1,37,3,37,546,8,37,1,38,1,38,1,38,5,38,551,8,38,10,
38,12,38,554,9,38,1,39,1,39,5,39,558,8,39,10,39,12,39,561,9,39,1,39,1,39,
1,39,1,40,1,40,1,40,5,40,569,8,40,10,40,12,40,572,9,40,1,41,1,41,3,41,576,
8,41,1,42,1,42,1,42,1,42,5,42,582,8,42,10,42,12,42,585,9,42,1,42,3,42,588,
8,42,3,42,590,8,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
1,43,1,43,1,43,3,43,606,8,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,47,
5,47,617,8,47,10,47,12,47,620,9,47,1,47,1,47,1,47,5,47,625,8,47,10,47,12,
47,628,9,47,3,47,630,8,47,1,48,1,48,3,48,634,8,48,1,48,1,48,1,48,3,48,639,
8,48,5,48,641,8,48,10,48,12,48,644,9,48,1,49,1,49,1,50,1,50,3,50,650,8,50,
1,51,1,51,1,51,1,51,5,51,656,8,51,10,51,12,51,659,9,51,1,51,1,51,1,52,1,
52,1,52,1,52,3,52,667,8,52,3,52,669,8,52,1,53,1,53,1,53,5,53,674,8,53,10,
53,12,53,677,9,53,1,54,1,54,3,54,681,8,54,1,54,1,54,1,55,1,55,1,55,1,55,
1,56,1,56,1,56,3,56,692,8,56,1,56,1,56,3,56,696,8,56,1,57,1,57,1,58,1,58,
3,58,702,8,58,1,58,5,58,705,8,58,10,58,12,58,708,9,58,1,58,1,58,1,59,3,59,
713,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,722,8,59,1,59,1,59,1,59,
1,59,3,59,728,8,59,1,60,1,60,1,60,5,60,733,8,60,10,60,12,60,736,9,60,1,61,
1,61,1,61,1,61,1,61,1,61,3,61,744,8,61,1,62,1,62,1,63,1,63,1,64,4,64,751,
8,64,11,64,12,64,752,1,65,1,65,1,65,1,65,1,65,3,65,760,8,65,1,65,3,65,763,
8,65,1,66,1,66,1,66,5,66,768,8,66,10,66,12,66,771,9,66,1,67,1,67,1,67,5,
67,776,8,67,10,67,12,67,779,9,67,1,68,1,68,1,68,1,68,1,69,1,69,1,69,3,69,
788,8,69,1,70,1,70,1,70,1,70,5,70,794,8,70,10,70,12,70,797,9,70,3,70,799,
8,70,1,70,3,70,802,8,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,72,1,72,5,72,
813,8,72,10,72,12,72,816,9,72,1,72,1,72,1,73,1,73,1,73,1,74,1,74,1,74,1,
74,1,74,1,74,3,74,829,8,74,1,74,1,74,3,74,833,8,74,1,74,1,74,3,74,837,8,
74,1,74,1,74,3,74,841,8,74,3,74,843,8,74,1,75,1,75,3,75,847,8,75,1,76,1,
76,1,76,1,76,3,76,853,8,76,1,77,1,77,1,78,1,78,1,78,1,79,1,79,5,79,862,8,
79,10,79,12,79,865,9,79,1,79,1,79,1,80,1,80,1,80,1,80,3,80,873,8,80,1,81,
1,81,1,81,1,82,1,82,1,82,1,82,1,83,5,83,883,8,83,10,83,12,83,886,9,83,1,
84,1,84,1,84,1,84,1,84,3,84,893,8,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
3,84,902,8,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,929,
8,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,941,8,84,1,84,
1,84,1,84,1,84,1,84,1,84,1,84,3,84,950,8,84,1,84,1,84,1,84,3,84,955,8,84,
1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,965,8,84,1,85,1,85,5,85,969,
8,85,10,85,12,85,972,9,85,1,86,1,86,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,
87,1,88,1,88,5,88,986,8,88,10,88,12,88,989,9,88,1,88,5,88,992,8,88,10,88,
12,88,995,9,88,1,88,1,88,1,89,4,89,1000,8,89,11,89,12,89,1001,1,89,5,89,
1005,8,89,10,89,12,89,1008,9,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,
1,90,1,90,3,90,1020,8,90,1,91,1,91,3,91,1024,8,91,1,91,1,91,3,91,1028,8,
91,1,91,1,91,3,91,1032,8,91,3,91,1034,8,91,1,92,1,92,3,92,1038,8,92,1,93,
1,93,1,93,1,93,1,93,1,93,1,94,1,94,1,95,1,95,1,95,1,95,1,96,1,96,1,96,5,
96,1055,8,96,10,96,12,96,1058,9,96,1,97,1,97,1,98,1,98,1,99,1,99,1,99,1,
99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1077,8,99,1,99,1,99,
1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1093,8,
99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1103,8,99,1,99,1,99,1,99,
1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,
99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,
1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1150,
8,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1164,
8,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1173,8,99,1,99,1,99,1,99,1,
99,1,99,1,99,1,99,3,99,1182,8,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,
1,99,1,99,1,99,3,99,1195,8,99,1,99,1,99,1,99,1,99,1,99,1,99,5,99,1203,8,
99,10,99,12,99,1206,9,99,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,
1,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,1223,8,100,1,101,1,101,1,
101,1,101,1,101,1,101,1,101,3,101,1232,8,101,3,101,1234,8,101,1,102,1,102,
3,102,1238,8,102,1,103,3,103,1241,8,103,1,103,1,103,1,103,1,104,1,104,1,
104,1,104,1,105,1,105,1,105,1,105,5,105,1254,8,105,10,105,12,105,1257,9,
105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,5,105,1266,8,105,10,105,12,
105,1269,9,105,1,105,1,105,5,105,1273,8,105,10,105,12,105,1276,9,105,3,105,
1278,8,105,1,106,1,106,3,106,1282,8,106,1,107,1,107,1,107,1,107,1,108,1,
108,3,108,1290,8,108,1,108,1,108,1,108,0,1,198,109,0,2,4,6,8,10,12,14,16,
18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,0,11,
1,0,32,39,2,0,8,8,41,41,2,0,41,41,45,45,1,0,90,92,1,0,47,48,1,0,67,70,1,
0,71,72,2,0,6,6,73,74,1,0,69,70,1,0,76,77,1,0,67,68,1417,0,219,1,0,0,0,2,
235,1,0,0,0,4,239,1,0,0,0,6,262,1,0,0,0,8,264,1,0,0,0,10,279,1,0,0,0,12,
289,1,0,0,0,14,299,1,0,0,0,16,304,1,0,0,0,18,307,1,0,0,0,20,318,1,0,0,0,
22,323,1,0,0,0,24,331,1,0,0,0,26,343,1,0,0,0,28,352,1,0,0,0,30,361,1,0,0,
0,32,368,1,0,0,0,34,379,1,0,0,0,36,387,1,0,0,0,38,396,1,0,0,0,40,413,1,0,
0,0,42,421,1,0,0,0,44,440,1,0,0,0,46,444,1,0,0,0,48,450,1,0,0,0,50,453,1,
0,0,0,52,458,1,0,0,0,54,472,1,0,0,0,56,481,1,0,0,0,58,483,1,0,0,0,60,491,
1,0,0,0,62,493,1,0,0,0,64,502,1,0,0,0,66,516,1,0,0,0,68,524,1,0,0,0,70,531,
1,0,0,0,72,534,1,0,0,0,74,542,1,0,0,0,76,547,1,0,0,0,78,559,1,0,0,0,80,565,
1,0,0,0,82,575,1,0,0,0,84,577,1,0,0,0,86,605,1,0,0,0,88,607,1,0,0,0,90,609,
1,0,0,0,92,611,1,0,0,0,94,629,1,0,0,0,96,631,1,0,0,0,98,645,1,0,0,0,100,
649,1,0,0,0,102,651,1,0,0,0,104,668,1,0,0,0,106,670,1,0,0,0,108,678,1,0,
0,0,110,684,1,0,0,0,112,695,1,0,0,0,114,697,1,0,0,0,116,699,1,0,0,0,118,
727,1,0,0,0,120,729,1,0,0,0,122,743,1,0,0,0,124,745,1,0,0,0,126,747,1,0,
0,0,128,750,1,0,0,0,130,754,1,0,0,0,132,764,1,0,0,0,134,772,1,0,0,0,136,
780,1,0,0,0,138,787,1,0,0,0,140,789,1,0,0,0,142,805,1,0,0,0,144,810,1,0,
0,0,146,819,1,0,0,0,148,842,1,0,0,0,150,846,1,0,0,0,152,848,1,0,0,0,154,
854,1,0,0,0,156,856,1,0,0,0,158,859,1,0,0,0,160,872,1,0,0,0,162,874,1,0,
0,0,164,877,1,0,0,0,166,884,1,0,0,0,168,964,1,0,0,0,170,966,1,0,0,0,172,
973,1,0,0,0,174,979,1,0,0,0,176,983,1,0,0,0,178,999,1,0,0,0,180,1019,1,0,
0,0,182,1033,1,0,0,0,184,1037,1,0,0,0,186,1039,1,0,0,0,188,1045,1,0,0,0,
190,1047,1,0,0,0,192,1051,1,0,0,0,194,1059,1,0,0,0,196,1061,1,0,0,0,198,
1076,1,0,0,0,200,1222,1,0,0,0,202,1233,1,0,0,0,204,1237,1,0,0,0,206,1240,
1,0,0,0,208,1245,1,0,0,0,210,1249,1,0,0,0,212,1279,1,0,0,0,214,1283,1,0,
0,0,216,1287,1,0,0,0,218,220,3,2,1,0,219,218,1,0,0,0,219,220,1,0,0,0,220,
224,1,0,0,0,221,223,3,4,2,0,222,221,1,0,0,0,223,226,1,0,0,0,224,222,1,0,
0,0,224,225,1,0,0,0,225,230,1,0,0,0,226,224,1,0,0,0,227,229,3,6,3,0,228,
227,1,0,0,0,229,232,1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,233,1,0,
0,0,232,230,1,0,0,0,233,234,5,0,0,1,234,1,1,0,0,0,235,236,5,1,0,0,236,237,
3,120,60,0,237,238,5,2,0,0,238,3,1,0,0,0,239,241,5,3,0,0,240,242,5,4,0,0,
241,240,1,0,0,0,241,242,1,0,0,0,242,243,1,0,0,0,243,246,3,120,60,0,244,245,
5,5,0,0,245,247,5,6,0,0,246,244,1,0,0,0,246,247,1,0,0,0,247,248,1,0,0,0,
248,249,5,2,0,0,249,5,1,0,0,0,250,252,3,14,7,0,251,250,1,0,0,0,252,255,1,
0,0,0,253,251,1,0,0,0,253,254,1,0,0,0,254,259,1,0,0,0,255,253,1,0,0,0,256,
260,3,8,4,0,257,260,3,12,6,0,258,260,3,10,5,0,259,256,1,0,0,0,259,257,1,
0,0,0,259,258,1,0,0,0,260,263,1,0,0,0,261,263,5,2,0,0,262,253,1,0,0,0,262,
261,1,0,0,0,263,7,1,0,0,0,264,265,5,7,0,0,265,267,5,98,0,0,266,268,3,18,
9,0,267,266,1,0,0,0,267,268,1,0,0,0,268,271,1,0,0,0,269,270,5,8,0,0,270,
272,3,94,47,0,271,269,1,0,0,0,271,272,1,0,0,0,272,275,1,0,0,0,273,274,5,
9,0,0,274,276,3,34,17,0,275,273,1,0,0,0,275,276,1,0,0,0,276,277,1,0,0,0,
277,278,3,36,18,0,278,9,1,0,0,0,279,280,5,96,0,0,280,283,5,98,0,0,281,282,
5,9,0,0,282,284,3,34,17,0,283,281,1,0,0,0,283,284,1,0,0,0,284,285,1,0,0,
0,285,286,3,24,12,0,286,11,1,0,0,0,287,290,3,32,16,0,288,290,3,142,71,0,
289,287,1,0,0,0,289,288,1,0,0,0,290,13,1,0,0,0,291,300,3,130,65,0,292,300,
5,10,0,0,293,300,5,11,0,0,294,300,5,12,0,0,295,300,5,13,0,0,296,300,5,4,
0,0,297,300,5,14,0,0,298,300,5,15,0,0,299,291,1,0,0,0,299,292,1,0,0,0,299,
293,1,0,0,0,299,294,1,0,0,0,299,295,1,0,0,0,299,296,1,0,0,0,299,297,1,0,
0,0,299,298,1,0,0,0,300,15,1,0,0,0,301,303,3,86,43,0,302,301,1,0,0,0,303,
306,1,0,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,17,1,0,0,0,306,304,1,0,0,
0,307,308,5,16,0,0,308,313,3,20,10,0,309,310,5,17,0,0,310,312,3,20,10,0,
311,309,1,0,0,0,312,315,1,0,0,0,313,311,1,0,0,0,313,314,1,0,0,0,314,316,
1,0,0,0,315,313,1,0,0,0,316,317,5,18,0,0,317,19,1,0,0,0,318,321,5,98,0,0,
319,320,5,8,0,0,320,322,3,22,11,0,321,319,1,0,0,0,321,322,1,0,0,0,322,21,
1,0,0,0,323,328,3,94,47,0,324,325,5,19,0,0,325,327,3,94,47,0,326,324,1,0,
0,0,327,330,1,0,0,0,328,326,1,0,0,0,328,329,1,0,0,0,329,23,1,0,0,0,330,328,
1,0,0,0,331,333,5,20,0,0,332,334,3,26,13,0,333,332,1,0,0,0,333,334,1,0,0,
0,334,336,1,0,0,0,335,337,5,17,0,0,336,335,1,0,0,0,336,337,1,0,0,0,337,339,
1,0,0,0,338,340,3,30,15,0,339,338,1,0,0,0,339,340,1,0,0,0,340,341,1,0,0,
0,341,342,5,21,0,0,342,25,1,0,0,0,343,348,3,28,14,0,344,345,5,17,0,0,345,
347,3,28,14,0,346,344,1,0,0,0,347,350,1,0,0,0,348,346,1,0,0,0,348,349,1,
0,0,0,349,27,1,0,0,0,350,348,1,0,0,0,351,353,3,128,64,0,352,351,1,0,0,0,
352,353,1,0,0,0,353,354,1,0,0,0,354,356,5,98,0,0,355,357,3,216,108,0,356,
355,1,0,0,0,356,357,1,0,0,0,357,359,1,0,0,0,358,360,3,36,18,0,359,358,1,
0,0,0,359,360,1,0,0,0,360,29,1,0,0,0,361,365,5,2,0,0,362,364,3,40,20,0,363,
362,1,0,0,0,364,367,1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,31,1,0,0,
0,367,365,1,0,0,0,368,369,5,22,0,0,369,371,5,98,0,0,370,372,3,18,9,0,371,
370,1,0,0,0,371,372,1,0,0,0,372,375,1,0,0,0,373,374,5,8,0,0,374,376,3,34,
17,0,375,373,1,0,0,0,375,376,1,0,0,0,376,377,1,0,0,0,377,378,3,38,19,0,378,
33,1,0,0,0,379,384,3,94,47,0,380,381,5,17,0,0,381,383,3,94,47,0,382,380,
1,0,0,0,383,386,1,0,0,0,384,382,1,0,0,0,384,385,1,0,0,0,385,35,1,0,0,0,386,
384,1,0,0,0,387,391,5,20,0,0,388,390,3,40,20,0,389,388,1,0,0,0,390,393,1,
0,0,0,391,389,1,0,0,0,391,392,1,0,0,0,392,394,1,0,0,0,393,391,1,0,0,0,394,
395,5,21,0,0,395,37,1,0,0,0,396,400,5,20,0,0,397,399,3,54,27,0,398,397,1,
0,0,0,399,402,1,0,0,0,400,398,1,0,0,0,400,401,1,0,0,0,401,403,1,0,0,0,402,
400,1,0,0,0,403,404,5,21,0,0,404,39,1,0,0,0,405,414,5,2,0,0,406,408,5,4,
0,0,407,406,1,0,0,0,407,408,1,0,0,0,408,409,1,0,0,0,409,414,3,158,79,0,410,
411,3,16,8,0,411,412,3,42,21,0,412,414,1,0,0,0,413,405,1,0,0,0,413,407,1,
0,0,0,413,410,1,0,0,0,414,41,1,0,0,0,415,422,3,48,24,0,416,422,3,44,22,0,
417,422,3,50,25,0,418,422,3,52,26,0,419,422,3,12,6,0,420,422,3,8,4,0,421,
415,1,0,0,0,421,416,1,0,0,0,421,417,1,0,0,0,421,418,1,0,0,0,421,419,1,0,
0,0,421,420,1,0,0,0,422,43,1,0,0,0,423,424,3,94,47,0,424,425,5,98,0,0,425,
430,3,108,54,0,426,427,5,23,0,0,427,429,5,24,0,0,428,426,1,0,0,0,429,432,
1,0,0,0,430,428,1,0,0,0,430,431,1,0,0,0,431,433,1,0,0,0,432,430,1,0,0,0,
433,434,3,46,23,0,434,441,1,0,0,0,435,436,5,25,0,0,436,437,5,98,0,0,437,
438,3,108,54,0,438,439,3,46,23,0,439,441,1,0,0,0,440,423,1,0,0,0,440,435,
1,0,0,0,441,45,1,0,0,0,442,443,5,26,0,0,443,445,3,106,53,0,444,442,1,0,0,
0,444,445,1,0,0,0,445,448,1,0,0,0,446,449,3,114,57,0,447,449,5,2,0,0,448,
446,1,0,0,0,448,447,1,0,0,0,449,47,1,0,0,0,450,451,3,18,9,0,451,452,3,44,
22,0,452,49,1,0,0,0,453,454,3,94,47,0,454,455,3,72,36,0,455,456,5,2,0,0,
456,51,1,0,0,0,457,459,3,18,9,0,458,457,1,0,0,0,458,459,1,0,0,0,459,460,
1,0,0,0,460,461,5,98,0,0,461,464,3,108,54,0,462,463,5,26,0,0,463,465,3,106,
53,0,464,462,1,0,0,0,464,465,1,0,0,0,465,466,1,0,0,0,466,467,3,116,58,0,
467,53,1,0,0,0,468,469,3,16,8,0,469,470,3,56,28,0,470,473,1,0,0,0,471,473,
5,2,0,0,472,468,1,0,0,0,472,471,1,0,0,0,473,55,1,0,0,0,474,482,3,58,29,0,
475,482,3,66,33,0,476,477,5,25,0,0,477,478,5,98,0,0,478,482,3,68,34,0,479,
482,3,12,6,0,480,482,3,8,4,0,481,474,1,0,0,0,481,475,1,0,0,0,481,476,1,0,
0,0,481,479,1,0,0,0,481,480,1,0,0,0,482,57,1,0,0,0,483,484,3,94,47,0,484,
485,5,98,0,0,485,486,3,60,30,0,486,59,1,0,0,0,487,488,3,76,38,0,488,489,
5,2,0,0,489,492,1,0,0,0,490,492,3,64,32,0,491,487,1,0,0,0,491,490,1,0,0,
0,492,61,1,0,0,0,493,496,3,108,54,0,494,495,5,26,0,0,495,497,3,106,53,0,
496,494,1,0,0,0,496,497,1,0,0,0,497,500,1,0,0,0,498,501,3,114,57,0,499,501,
5,2,0,0,500,498,1,0,0,0,500,499,1,0,0,0,501,63,1,0,0,0,502,507,3,108,54,
0,503,504,5,23,0,0,504,506,5,24,0,0,505,503,1,0,0,0,506,509,1,0,0,0,507,
505,1,0,0,0,507,508,1,0,0,0,508,512,1,0,0,0,509,507,1,0,0,0,510,511,5,26,
0,0,511,513,3,106,53,0,512,510,1,0,0,0,512,513,1,0,0,0,513,514,1,0,0,0,514,
515,5,2,0,0,515,65,1,0,0,0,516,519,3,18,9,0,517,520,3,94,47,0,518,520,5,
25,0,0,519,517,1,0,0,0,519,518,1,0,0,0,520,521,1,0,0,0,521,522,5,98,0,0,
522,523,3,64,32,0,523,67,1,0,0,0,524,527,3,108,54,0,525,526,5,26,0,0,526,
528,3,106,53,0,527,525,1,0,0,0,527,528,1,0,0,0,528,529,1,0,0,0,529,530,5,
2,0,0,530,69,1,0,0,0,531,532,5,98,0,0,532,533,3,78,39,0,533,71,1,0,0,0,534,
539,3,74,37,0,535,536,5,17,0,0,536,538,3,74,37,0,537,535,1,0,0,0,538,541,
1,0,0,0,539,537,1,0,0,0,539,540,1,0,0,0,540,73,1,0,0,0,541,539,1,0,0,0,542,
545,3,80,40,0,543,544,5,27,0,0,544,546,3,82,41,0,545,543,1,0,0,0,545,546,
1,0,0,0,546,75,1,0,0,0,547,552,3,78,39,0,548,549,5,17,0,0,549,551,3,70,35,
0,550,548,1,0,0,0,551,554,1,0,0,0,552,550,1,0,0,0,552,553,1,0,0,0,553,77,
1,0,0,0,554,552,1,0,0,0,555,556,5,23,0,0,556,558,5,24,0,0,557,555,1,0,0,
0,558,561,1,0,0,0,559,557,1,0,0,0,559,560,1,0,0,0,560,562,1,0,0,0,561,559,
1,0,0,0,562,563,5,27,0,0,563,564,3,82,41,0,564,79,1,0,0,0,565,570,5,98,0,
0,566,567,5,23,0,0,567,569,5,24,0,0,568,566,1,0,0,0,569,572,1,0,0,0,570,
568,1,0,0,0,570,571,1,0,0,0,571,81,1,0,0,0,572,570,1,0,0,0,573,576,3,84,
42,0,574,576,3,198,99,0,575,573,1,0,0,0,575,574,1,0,0,0,576,83,1,0,0,0,577,
589,5,20,0,0,578,583,3,82,41,0,579,580,5,17,0,0,580,582,3,82,41,0,581,579,
1,0,0,0,582,585,1,0,0,0,583,581,1,0,0,0,583,584,1,0,0,0,584,587,1,0,0,0,
585,583,1,0,0,0,586,588,5,17,0,0,587,586,1,0,0,0,587,588,1,0,0,0,588,590,
1,0,0,0,589,578,1,0,0,0,589,590,1,0,0,0,590,591,1,0,0,0,591,592,5,21,0,0,
592,85,1,0,0,0,593,606,3,130,65,0,594,606,5,10,0,0,595,606,5,11,0,0,596,
606,5,12,0,0,597,606,5,4,0,0,598,606,5,13,0,0,599,606,5,14,0,0,600,606,5,
28,0,0,601,606,5,29,0,0,602,606,5,30,0,0,603,606,5,31,0,0,604,606,5,15,0,
0,605,593,1,0,0,0,605,594,1,0,0,0,605,595,1,0,0,0,605,596,1,0,0,0,605,597,
1,0,0,0,605,598,1,0,0,0,605,599,1,0,0,0,605,600,1,0,0,0,605,601,1,0,0,0,
605,602,1,0,0,0,605,603,1,0,0,0,605,604,1,0,0,0,606,87,1,0,0,0,607,608,3,
120,60,0,608,89,1,0,0,0,609,610,5,98,0,0,610,91,1,0,0,0,611,612,3,120,60,
0,612,93,1,0,0,0,613,618,3,96,48,0,614,615,5,23,0,0,615,617,5,24,0,0,616,
614,1,0,0,0,617,620,1,0,0,0,618,616,1,0,0,0,618,619,1,0,0,0,619,630,1,0,
0,0,620,618,1,0,0,0,621,626,3,98,49,0,622,623,5,23,0,0,623,625,5,24,0,0,
624,622,1,0,0,0,625,628,1,0,0,0,626,624,1,0,0,0,626,627,1,0,0,0,627,630,
1,0,0,0,628,626,1,0,0,0,629,613,1,0,0,0,629,621,1,0,0,0,630,95,1,0,0,0,631,
633,5,98,0,0,632,634,3,102,51,0,633,632,1,0,0,0,633,634,1,0,0,0,634,642,
1,0,0,0,635,636,5,5,0,0,636,638,5,98,0,0,637,639,3,102,51,0,638,637,1,0,
0,0,638,639,1,0,0,0,639,641,1,0,0,0,640,635,1,0,0,0,641,644,1,0,0,0,642,
640,1,0,0,0,642,643,1,0,0,0,643,97,1,0,0,0,644,642,1,0,0,0,645,646,7,0,0,
0,646,99,1,0,0,0,647,650,5,14,0,0,648,650,3,130,65,0,649,647,1,0,0,0,649,
648,1,0,0,0,650,101,1,0,0,0,651,652,5,16,0,0,652,657,3,104,52,0,653,654,
5,17,0,0,654,656,3,104,52,0,655,653,1,0,0,0,656,659,1,0,0,0,657,655,1,0,
0,0,657,658,1,0,0,0,658,660,1,0,0,0,659,657,1,0,0,0,660,661,5,18,0,0,661,
103,1,0,0,0,662,669,3,94,47,0,663,666,5,40,0,0,664,665,7,1,0,0,665,667,3,
94,47,0,666,664,1,0,0,0,666,667,1,0,0,0,667,669,1,0,0,0,668,662,1,0,0,0,
668,663,1,0,0,0,669,105,1,0,0,0,670,675,3,120,60,0,671,672,5,17,0,0,672,
674,3,120,60,0,673,671,1,0,0,0,674,677,1,0,0,0,675,673,1,0,0,0,675,676,1,
0,0,0,676,107,1,0,0,0,677,675,1,0,0,0,678,680,5,42,0,0,679,681,3,110,55,
0,680,679,1,0,0,0,680,681,1,0,0,0,681,682,1,0,0,0,682,683,5,43,0,0,683,109,
1,0,0,0,684,685,3,166,83,0,685,686,3,94,47,0,686,687,3,112,56,0,687,111,
1,0,0,0,688,691,3,80,40,0,689,690,5,17,0,0,690,692,3,110,55,0,691,689,1,
0,0,0,691,692,1,0,0,0,692,696,1,0,0,0,693,694,5,44,0,0,694,696,3,80,40,0,
695,688,1,0,0,0,695,693,1,0,0,0,696,113,1,0,0,0,697,698,3,158,79,0,698,115,
1,0,0,0,699,701,5,20,0,0,700,702,3,118,59,0,701,700,1,0,0,0,701,702,1,0,
0,0,702,706,1,0,0,0,703,705,3,160,80,0,704,703,1,0,0,0,705,708,1,0,0,0,706,
704,1,0,0,0,706,707,1,0,0,0,707,709,1,0,0,0,708,706,1,0,0,0,709,710,5,21,
0,0,710,117,1,0,0,0,711,713,3,214,107,0,712,711,1,0,0,0,712,713,1,0,0,0,
713,714,1,0,0,0,714,715,7,2,0,0,715,716,3,216,108,0,716,717,5,2,0,0,717,
728,1,0,0,0,718,719,3,200,100,0,719,721,5,5,0,0,720,722,3,214,107,0,721,
720,1,0,0,0,721,722,1,0,0,0,722,723,1,0,0,0,723,724,5,41,0,0,724,725,3,216,
108,0,725,726,5,2,0,0,726,728,1,0,0,0,727,712,1,0,0,0,727,718,1,0,0,0,728,
119,1,0,0,0,729,734,5,98,0,0,730,731,5,5,0,0,731,733,5,98,0,0,732,730,1,
0,0,0,733,736,1,0,0,0,734,732,1,0,0,0,734,735,1,0,0,0,735,121,1,0,0,0,736,
734,1,0,0,0,737,744,3,124,62,0,738,744,5,93,0,0,739,744,5,94,0,0,740,744,
5,95,0,0,741,744,3,126,63,0,742,744,5,46,0,0,743,737,1,0,0,0,743,738,1,0,
0,0,743,739,1,0,0,0,743,740,1,0,0,0,743,741,1,0,0,0,743,742,1,0,0,0,744,
123,1,0,0,0,745,746,7,3,0,0,746,125,1,0,0,0,747,748,7,4,0,0,748,127,1,0,
0,0,749,751,3,130,65,0,750,749,1,0,0,0,751,752,1,0,0,0,752,750,1,0,0,0,752,
753,1,0,0,0,753,129,1,0,0,0,754,755,5,49,0,0,755,762,3,132,66,0,756,759,
5,42,0,0,757,760,3,134,67,0,758,760,3,138,69,0,759,757,1,0,0,0,759,758,1,
0,0,0,759,760,1,0,0,0,760,761,1,0,0,0,761,763,5,43,0,0,762,756,1,0,0,0,762,
763,1,0,0,0,763,131,1,0,0,0,764,769,5,98,0,0,765,766,5,5,0,0,766,768,5,98,
0,0,767,765,1,0,0,0,768,771,1,0,0,0,769,767,1,0,0,0,769,770,1,0,0,0,770,
133,1,0,0,0,771,769,1,0,0,0,772,777,3,136,68,0,773,774,5,17,0,0,774,776,
3,136,68,0,775,773,1,0,0,0,776,779,1,0,0,0,777,775,1,0,0,0,777,778,1,0,0,
0,778,135,1,0,0,0,779,777,1,0,0,0,780,781,5,98,0,0,781,782,5,27,0,0,782,
783,3,138,69,0,783,137,1,0,0,0,784,788,3,198,99,0,785,788,3,130,65,0,786,
788,3,140,70,0,787,784,1,0,0,0,787,785,1,0,0,0,787,786,1,0,0,0,788,139,1,
0,0,0,789,798,5,20,0,0,790,795,3,138,69,0,791,792,5,17,0,0,792,794,3,138,
69,0,793,791,1,0,0,0,794,797,1,0,0,0,795,793,1,0,0,0,795,796,1,0,0,0,796,
799,1,0,0,0,797,795,1,0,0,0,798,790,1,0,0,0,798,799,1,0,0,0,799,801,1,0,
0,0,800,802,5,17,0,0,801,800,1,0,0,0,801,802,1,0,0,0,802,803,1,0,0,0,803,
804,5,21,0,0,804,141,1,0,0,0,805,806,5,49,0,0,806,807,5,22,0,0,807,808,5,
98,0,0,808,809,3,144,72,0,809,143,1,0,0,0,810,814,5,20,0,0,811,813,3,146,
73,0,812,811,1,0,0,0,813,816,1,0,0,0,814,812,1,0,0,0,814,815,1,0,0,0,815,
817,1,0,0,0,816,814,1,0,0,0,817,818,5,21,0,0,818,145,1,0,0,0,819,820,3,16,
8,0,820,821,3,148,74,0,821,147,1,0,0,0,822,823,3,94,47,0,823,824,3,150,75,
0,824,825,5,2,0,0,825,843,1,0,0,0,826,828,3,8,4,0,827,829,5,2,0,0,828,827,
1,0,0,0,828,829,1,0,0,0,829,843,1,0,0,0,830,832,3,32,16,0,831,833,5,2,0,
0,832,831,1,0,0,0,832,833,1,0,0,0,833,843,1,0,0,0,834,836,3,10,5,0,835,837,
5,2,0,0,836,835,1,0,0,0,836,837,1,0,0,0,837,843,1,0,0,0,838,840,3,142,71,
0,839,841,5,2,0,0,840,839,1,0,0,0,840,841,1,0,0,0,841,843,1,0,0,0,842,822,
1,0,0,0,842,826,1,0,0,0,842,830,1,0,0,0,842,834,1,0,0,0,842,838,1,0,0,0,
843,149,1,0,0,0,844,847,3,152,76,0,845,847,3,154,77,0,846,844,1,0,0,0,846,
845,1,0,0,0,847,151,1,0,0,0,848,849,5,98,0,0,849,850,5,42,0,0,850,852,5,
43,0,0,851,853,3,156,78,0,852,851,1,0,0,0,852,853,1,0,0,0,853,153,1,0,0,
0,854,855,3,72,36,0,855,155,1,0,0,0,856,857,5,50,0,0,857,858,3,138,69,0,
858,157,1,0,0,0,859,863,5,20,0,0,860,862,3,160,80,0,861,860,1,0,0,0,862,
865,1,0,0,0,863,861,1,0,0,0,863,864,1,0,0,0,864,866,1,0,0,0,865,863,1,0,
0,0,866,867,5,21,0,0,867,159,1,0,0,0,868,873,3,162,81,0,869,873,3,8,4,0,
870,873,3,12,6,0,871,873,3,168,84,0,872,868,1,0,0,0,872,869,1,0,0,0,872,
870,1,0,0,0,872,871,1,0,0,0,873,161,1,0,0,0,874,875,3,164,82,0,875,876,5,
2,0,0,876,163,1,0,0,0,877,878,3,166,83,0,878,879,3,94,47,0,879,880,3,72,
36,0,880,165,1,0,0,0,881,883,3,100,50,0,882,881,1,0,0,0,883,886,1,0,0,0,
884,882,1,0,0,0,884,885,1,0,0,0,885,167,1,0,0,0,886,884,1,0,0,0,887,965,
3,158,79,0,888,889,5,97,0,0,889,892,3,198,99,0,890,891,5,51,0,0,891,893,
3,198,99,0,892,890,1,0,0,0,892,893,1,0,0,0,893,894,1,0,0,0,894,895,5,2,0,
0,895,965,1,0,0,0,896,897,5,52,0,0,897,898,3,190,95,0,898,901,3,168,84,0,
899,900,5,53,0,0,900,902,3,168,84,0,901,899,1,0,0,0,901,902,1,0,0,0,902,
965,1,0,0,0,903,904,5,54,0,0,904,905,5,42,0,0,905,906,3,182,91,0,906,907,
5,43,0,0,907,908,3,168,84,0,908,965,1,0,0,0,909,910,5,55,0,0,910,911,3,190,
95,0,911,912,3,168,84,0,912,965,1,0,0,0,913,914,5,56,0,0,914,915,3,168,84,
0,915,916,5,55,0,0,916,917,3,190,95,0,917,918,5,2,0,0,918,965,1,0,0,0,919,
920,5,57,0,0,920,928,3,158,79,0,921,922,3,170,85,0,922,923,5,58,0,0,923,
924,3,158,79,0,924,929,1,0,0,0,925,929,3,170,85,0,926,927,5,58,0,0,927,929,
3,158,79,0,928,921,1,0,0,0,928,925,1,0,0,0,928,926,1,0,0,0,929,965,1,0,0,
0,930,931,5,59,0,0,931,932,3,190,95,0,932,933,3,176,88,0,933,965,1,0,0,0,
934,935,5,29,0,0,935,936,3,190,95,0,936,937,3,158,79,0,937,965,1,0,0,0,938,
940,5,60,0,0,939,941,3,198,99,0,940,939,1,0,0,0,940,941,1,0,0,0,941,942,
1,0,0,0,942,965,5,2,0,0,943,944,5,61,0,0,944,945,3,198,99,0,945,946,5,2,
0,0,946,965,1,0,0,0,947,949,5,62,0,0,948,950,5,98,0,0,949,948,1,0,0,0,949,
950,1,0,0,0,950,951,1,0,0,0,951,965,5,2,0,0,952,954,5,63,0,0,953,955,5,98,
0,0,954,953,1,0,0,0,954,955,1,0,0,0,955,956,1,0,0,0,956,965,5,2,0,0,957,
965,5,2,0,0,958,959,3,194,97,0,959,960,5,2,0,0,960,965,1,0,0,0,961,962,5,
98,0,0,962,963,5,51,0,0,963,965,3,168,84,0,964,887,1,0,0,0,964,888,1,0,0,
0,964,896,1,0,0,0,964,903,1,0,0,0,964,909,1,0,0,0,964,913,1,0,0,0,964,919,
1,0,0,0,964,930,1,0,0,0,964,934,1,0,0,0,964,938,1,0,0,0,964,943,1,0,0,0,
964,947,1,0,0,0,964,952,1,0,0,0,964,957,1,0,0,0,964,958,1,0,0,0,964,961,
1,0,0,0,965,169,1,0,0,0,966,970,3,172,86,0,967,969,3,172,86,0,968,967,1,
0,0,0,969,972,1,0,0,0,970,968,1,0,0,0,970,971,1,0,0,0,971,171,1,0,0,0,972,
970,1,0,0,0,973,974,5,64,0,0,974,975,5,42,0,0,975,976,3,174,87,0,976,977,
5,43,0,0,977,978,3,158,79,0,978,173,1,0,0,0,979,980,3,166,83,0,980,981,3,
94,47,0,981,982,3,80,40,0,982,175,1,0,0,0,983,987,5,20,0,0,984,986,3,178,
89,0,985,984,1,0,0,0,986,989,1,0,0,0,987,985,1,0,0,0,987,988,1,0,0,0,988,
993,1,0,0,0,989,987,1,0,0,0,990,992,3,180,90,0,991,990,1,0,0,0,992,995,1,
0,0,0,993,991,1,0,0,0,993,994,1,0,0,0,994,996,1,0,0,0,995,993,1,0,0,0,996,
997,5,21,0,0,997,177,1,0,0,0,998,1000,3,180,90,0,999,998,1,0,0,0,1000,1001,
1,0,0,0,1001,999,1,0,0,0,1001,1002,1,0,0,0,1002,1006,1,0,0,0,1003,1005,3,
160,80,0,1004,1003,1,0,0,0,1005,1008,1,0,0,0,1006,1004,1,0,0,0,1006,1007,
1,0,0,0,1007,179,1,0,0,0,1008,1006,1,0,0,0,1009,1010,5,65,0,0,1010,1011,
3,196,98,0,1011,1012,5,51,0,0,1012,1020,1,0,0,0,1013,1014,5,65,0,0,1014,
1015,3,90,45,0,1015,1016,5,51,0,0,1016,1020,1,0,0,0,1017,1018,5,50,0,0,1018,
1020,5,51,0,0,1019,1009,1,0,0,0,1019,1013,1,0,0,0,1019,1017,1,0,0,0,1020,
181,1,0,0,0,1021,1034,3,186,93,0,1022,1024,3,184,92,0,1023,1022,1,0,0,0,
1023,1024,1,0,0,0,1024,1025,1,0,0,0,1025,1027,5,2,0,0,1026,1028,3,198,99,
0,1027,1026,1,0,0,0,1027,1028,1,0,0,0,1028,1029,1,0,0,0,1029,1031,5,2,0,
0,1030,1032,3,188,94,0,1031,1030,1,0,0,0,1031,1032,1,0,0,0,1032,1034,1,0,
0,0,1033,1021,1,0,0,0,1033,1023,1,0,0,0,1034,183,1,0,0,0,1035,1038,3,164,
82,0,1036,1038,3,192,96,0,1037,1035,1,0,0,0,1037,1036,1,0,0,0,1038,185,1,
0,0,0,1039,1040,3,166,83,0,1040,1041,3,94,47,0,1041,1042,5,98,0,0,1042,1043,
5,51,0,0,1043,1044,3,198,99,0,1044,187,1,0,0,0,1045,1046,3,192,96,0,1046,
189,1,0,0,0,1047,1048,5,42,0,0,1048,1049,3,198,99,0,1049,1050,5,43,0,0,1050,
191,1,0,0,0,1051,1056,3,198,99,0,1052,1053,5,17,0,0,1053,1055,3,198,99,0,
1054,1052,1,0,0,0,1055,1058,1,0,0,0,1056,1054,1,0,0,0,1056,1057,1,0,0,0,
1057,193,1,0,0,0,1058,1056,1,0,0,0,1059,1060,3,198,99,0,1060,195,1,0,0,0,
1061,1062,3,198,99,0,1062,197,1,0,0,0,1063,1064,6,99,-1,0,1064,1077,3,200,
100,0,1065,1066,7,5,0,0,1066,1077,3,198,99,17,1067,1068,7,6,0,0,1068,1077,
3,198,99,16,1069,1070,5,42,0,0,1070,1071,3,94,47,0,1071,1072,5,43,0,0,1072,
1073,3,198,99,15,1073,1077,1,0,0,0,1074,1075,5,66,0,0,1075,1077,3,202,101,
0,1076,1063,1,0,0,0,1076,1065,1,0,0,0,1076,1067,1,0,0,0,1076,1069,1,0,0,
0,1076,1074,1,0,0,0,1077,1204,1,0,0,0,1078,1079,10,13,0,0,1079,1080,7,7,
0,0,1080,1203,3,198,99,14,1081,1082,10,12,0,0,1082,1083,7,8,0,0,1083,1203,
3,198,99,13,1084,1092,10,11,0,0,1085,1086,5,16,0,0,1086,1093,5,16,0,0,1087,
1088,5,18,0,0,1088,1089,5,18,0,0,1089,1093,5,18,0,0,1090,1091,5,18,0,0,1091,
1093,5,18,0,0,1092,1085,1,0,0,0,1092,1087,1,0,0,0,1092,1090,1,0,0,0,1093,
1094,1,0,0,0,1094,1203,3,198,99,12,1095,1102,10,10,0,0,1096,1097,5,16,0,
0,1097,1103,5,27,0,0,1098,1099,5,18,0,0,1099,1103,5,27,0,0,1100,1103,5,18,
0,0,1101,1103,5,16,0,0,1102,1096,1,0,0,0,1102,1098,1,0,0,0,1102,1100,1,0,
0,0,1102,1101,1,0,0,0,1103,1104,1,0,0,0,1104,1203,3,198,99,11,1105,1106,
10,8,0,0,1106,1107,7,9,0,0,1107,1203,3,198,99,9,1108,1109,10,7,0,0,1109,
1110,5,19,0,0,1110,1203,3,198,99,8,1111,1112,10,6,0,0,1112,1113,5,78,0,0,
1113,1203,3,198,99,7,1114,1115,10,5,0,0,1115,1116,5,79,0,0,1116,1203,3,198,
99,6,1117,1118,10,4,0,0,1118,1119,5,80,0,0,1119,1203,3,198,99,5,1120,1121,
10,3,0,0,1121,1122,5,81,0,0,1122,1203,3,198,99,4,1123,1124,10,2,0,0,1124,
1125,5,40,0,0,1125,1126,3,198,99,0,1126,1127,5,51,0,0,1127,1128,3,198,99,
3,1128,1203,1,0,0,0,1129,1149,10,1,0,0,1130,1150,5,82,0,0,1131,1150,5,83,
0,0,1132,1150,5,84,0,0,1133,1150,5,85,0,0,1134,1150,5,86,0,0,1135,1150,5,
87,0,0,1136,1150,5,88,0,0,1137,1150,5,27,0,0,1138,1139,5,18,0,0,1139,1140,
5,18,0,0,1140,1150,5,27,0,0,1141,1142,5,18,0,0,1142,1143,5,18,0,0,1143,1144,
5,18,0,0,1144,1150,5,27,0,0,1145,1146,5,16,0,0,1146,1147,5,16,0,0,1147,1150,
5,27,0,0,1148,1150,5,89,0,0,1149,1130,1,0,0,0,1149,1131,1,0,0,0,1149,1132,
1,0,0,0,1149,1133,1,0,0,0,1149,1134,1,0,0,0,1149,1135,1,0,0,0,1149,1136,
1,0,0,0,1149,1137,1,0,0,0,1149,1138,1,0,0,0,1149,1141,1,0,0,0,1149,1145,
1,0,0,0,1149,1148,1,0,0,0,1150,1151,1,0,0,0,1151,1203,3,198,99,2,1152,1153,
10,26,0,0,1153,1154,5,5,0,0,1154,1203,5,98,0,0,1155,1156,10,25,0,0,1156,
1157,5,5,0,0,1157,1203,5,45,0,0,1158,1159,10,24,0,0,1159,1160,5,5,0,0,1160,
1161,5,41,0,0,1161,1163,5,42,0,0,1162,1164,3,192,96,0,1163,1162,1,0,0,0,
1163,1164,1,0,0,0,1164,1165,1,0,0,0,1165,1203,5,43,0,0,1166,1167,10,23,0,
0,1167,1168,5,5,0,0,1168,1169,5,66,0,0,1169,1170,5,98,0,0,1170,1172,5,42,
0,0,1171,1173,3,192,96,0,1172,1171,1,0,0,0,1172,1173,1,0,0,0,1173,1174,1,
0,0,0,1174,1203,5,43,0,0,1175,1176,10,22,0,0,1176,1177,5,5,0,0,1177,1178,
5,41,0,0,1178,1179,5,5,0,0,1179,1181,5,98,0,0,1180,1182,3,216,108,0,1181,
1180,1,0,0,0,1181,1182,1,0,0,0,1182,1203,1,0,0,0,1183,1184,10,21,0,0,1184,
1185,5,5,0,0,1185,1203,3,208,104,0,1186,1187,10,20,0,0,1187,1188,5,23,0,
0,1188,1189,3,198,99,0,1189,1190,5,24,0,0,1190,1203,1,0,0,0,1191,1192,10,
19,0,0,1192,1194,5,42,0,0,1193,1195,3,192,96,0,1194,1193,1,0,0,0,1194,1195,
1,0,0,0,1195,1196,1,0,0,0,1196,1203,5,43,0,0,1197,1198,10,18,0,0,1198,1203,
7,10,0,0,1199,1200,10,9,0,0,1200,1201,5,75,0,0,1201,1203,3,94,47,0,1202,
1078,1,0,0,0,1202,1081,1,0,0,0,1202,1084,1,0,0,0,1202,1095,1,0,0,0,1202,
1105,1,0,0,0,1202,1108,1,0,0,0,1202,1111,1,0,0,0,1202,1114,1,0,0,0,1202,
1117,1,0,0,0,1202,1120,1,0,0,0,1202,1123,1,0,0,0,1202,1129,1,0,0,0,1202,
1152,1,0,0,0,1202,1155,1,0,0,0,1202,1158,1,0,0,0,1202,1166,1,0,0,0,1202,
1175,1,0,0,0,1202,1183,1,0,0,0,1202,1186,1,0,0,0,1202,1191,1,0,0,0,1202,
1197,1,0,0,0,1202,1199,1,0,0,0,1203,1206,1,0,0,0,1204,1202,1,0,0,0,1204,
1205,1,0,0,0,1205,199,1,0,0,0,1206,1204,1,0,0,0,1207,1208,5,42,0,0,1208,
1209,3,198,99,0,1209,1210,5,43,0,0,1210,1223,1,0,0,0,1211,1223,5,45,0,0,
1212,1223,5,41,0,0,1213,1223,3,122,61,0,1214,1223,5,98,0,0,1215,1216,3,94,
47,0,1216,1217,5,5,0,0,1217,1218,5,7,0,0,1218,1223,1,0,0,0,1219,1220,5,25,
0,0,1220,1221,5,5,0,0,1221,1223,5,7,0,0,1222,1207,1,0,0,0,1222,1211,1,0,
0,0,1222,1212,1,0,0,0,1222,1213,1,0,0,0,1222,1214,1,0,0,0,1222,1215,1,0,
0,0,1222,1219,1,0,0,0,1223,201,1,0,0,0,1224,1225,3,214,107,0,1225,1226,3,
204,102,0,1226,1227,3,212,106,0,1227,1234,1,0,0,0,1228,1231,3,204,102,0,
1229,1232,3,210,105,0,1230,1232,3,212,106,0,1231,1229,1,0,0,0,1231,1230,
1,0,0,0,1232,1234,1,0,0,0,1233,1224,1,0,0,0,1233,1228,1,0,0,0,1234,203,1,
0,0,0,1235,1238,3,96,48,0,1236,1238,3,98,49,0,1237,1235,1,0,0,0,1237,1236,
1,0,0,0,1238,205,1,0,0,0,1239,1241,3,214,107,0,1240,1239,1,0,0,0,1240,1241,
1,0,0,0,1241,1242,1,0,0,0,1242,1243,5,98,0,0,1243,1244,3,212,106,0,1244,
207,1,0,0,0,1245,1246,3,214,107,0,1246,1247,5,98,0,0,1247,1248,3,216,108,
0,1248,209,1,0,0,0,1249,1277,5,23,0,0,1250,1255,5,24,0,0,1251,1252,5,23,
0,0,1252,1254,5,24,0,0,1253,1251,1,0,0,0,1254,1257,1,0,0,0,1255,1253,1,0,
0,0,1255,1256,1,0,0,0,1256,1258,1,0,0,0,1257,1255,1,0,0,0,1258,1278,3,84,
42,0,1259,1260,3,198,99,0,1260,1267,5,24,0,0,1261,1262,5,23,0,0,1262,1263,
3,198,99,0,1263,1264,5,24,0,0,1264,1266,1,0,0,0,1265,1261,1,0,0,0,1266,1269,
1,0,0,0,1267,1265,1,0,0,0,1267,1268,1,0,0,0,1268,1274,1,0,0,0,1269,1267,
1,0,0,0,1270,1271,5,23,0,0,1271,1273,5,24,0,0,1272,1270,1,0,0,0,1273,1276,
1,0,0,0,1274,1272,1,0,0,0,1274,1275,1,0,0,0,1275,1278,1,0,0,0,1276,1274,
1,0,0,0,1277,1250,1,0,0,0,1277,1259,1,0,0,0,1278,211,1,0,0,0,1279,1281,3,
216,108,0,1280,1282,3,36,18,0,1281,1280,1,0,0,0,1281,1282,1,0,0,0,1282,213,
1,0,0,0,1283,1284,5,16,0,0,1284,1285,3,34,17,0,1285,1286,5,18,0,0,1286,215,
1,0,0,0,1287,1289,5,42,0,0,1288,1290,3,192,96,0,1289,1288,1,0,0,0,1289,1290,
1,0,0,0,1290,1291,1,0,0,0,1291,1292,5,43,0,0,1292,217,1,0,0,0,140,219,224,
230,241,246,253,259,262,267,271,275,283,289,299,304,313,321,328,333,336,
339,348,352,356,359,365,371,375,384,391,400,407,413,421,430,440,444,448,
458,464,472,481,491,496,500,507,512,519,527,539,545,552,559,570,575,583,
587,589,605,618,626,629,633,638,642,649,657,666,668,675,680,691,695,701,
706,712,721,727,734,743,752,759,762,769,777,787,795,798,801,814,828,832,
836,840,842,846,852,863,872,884,892,901,928,940,949,954,964,970,987,993,
1001,1006,1019,1023,1027,1031,1033,1037,1056,1076,1092,1102,1149,1163,1172,
1181,1194,1202,1204,1222,1231,1233,1237,1240,1255,1267,1274,1277,1281,1289];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class JavaParser extends antlr4.Parser {

    static grammarFileName = "Java.g4";
    static literalNames = [ null, "'package'", "';'", "'import'", "'static'", 
                            "'.'", "'*'", "'class'", "'extends'", "'implements'", 
                            "'public'", "'protected'", "'private'", "'abstract'", 
                            "'final'", "'strictfp'", "'<'", "','", "'>'", 
                            "'&'", "'{'", "'}'", "'interface'", "'['", "']'", 
                            "'void'", "'throws'", "'='", "'native'", "'synchronized'", 
                            "'transient'", "'volatile'", "'boolean'", "'char'", 
                            "'byte'", "'short'", "'int'", "'long'", "'float'", 
                            "'double'", "'?'", "'super'", "'('", "')'", 
                            "'...'", "'this'", "'null'", "'true'", "'false'", 
                            "'@'", "'default'", "':'", "'if'", "'else'", 
                            "'for'", "'while'", "'do'", "'try'", "'finally'", 
                            "'switch'", "'return'", "'throw'", "'break'", 
                            "'continue'", "'catch'", "'case'", "'new'", 
                            "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", 
                            "'/'", "'%'", "'instanceof'", "'=='", "'!='", 
                            "'^'", "'|'", "'&&'", "'||'", "'^='", "'+='", 
                            "'-='", "'*='", "'/='", "'&='", "'|='", "'%='", 
                            null, null, null, null, null, null, "'enum'", 
                            "'assert'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, "HexLiteral", "DecimalLiteral", 
                             "OctalLiteral", "FloatingPointLiteral", "CharacterLiteral", 
                             "StringLiteral", "ENUM", "ASSERT", "Identifier", 
                             "COMMENT", "WS", "LINE_COMMENT" ];
    static ruleNames = [ "compilationUnit", "packageDeclaration", "importDeclaration", 
                         "typeDeclaration", "classDeclaration", "enumDeclaration", 
                         "interfaceDeclaration", "classOrInterfaceModifier", 
                         "modifiers", "typeParameters", "typeParameter", 
                         "typeBound", "enumBody", "enumConstants", "enumConstant", 
                         "enumBodyDeclarations", "normalInterfaceDeclaration", 
                         "typeList", "classBody", "interfaceBody", "classBodyDeclaration", 
                         "member", "methodDeclaration", "methodDeclarationRest", 
                         "genericMethodDeclaration", "fieldDeclaration", 
                         "constructorDeclaration", "interfaceBodyDeclaration", 
                         "interfaceMemberDecl", "interfaceMethodOrFieldDecl", 
                         "interfaceMethodOrFieldRest", "voidMethodDeclaratorRest", 
                         "interfaceMethodDeclaratorRest", "interfaceGenericMethodDecl", 
                         "voidInterfaceMethodDeclaratorRest", "constantDeclarator", 
                         "variableDeclarators", "variableDeclarator", "constantDeclaratorsRest", 
                         "constantDeclaratorRest", "variableDeclaratorId", 
                         "variableInitializer", "arrayInitializer", "modifier", 
                         "packageOrTypeName", "enumConstantName", "typeName", 
                         "type", "classOrInterfaceType", "primitiveType", 
                         "variableModifier", "typeArguments", "typeArgument", 
                         "qualifiedNameList", "formalParameters", "formalParameterDecls", 
                         "formalParameterDeclsRest", "methodBody", "constructorBody", 
                         "explicitConstructorInvocation", "qualifiedName", 
                         "literal", "integerLiteral", "booleanLiteral", 
                         "annotations", "annotation", "annotationName", 
                         "elementValuePairs", "elementValuePair", "elementValue", 
                         "elementValueArrayInitializer", "annotationTypeDeclaration", 
                         "annotationTypeBody", "annotationTypeElementDeclaration", 
                         "annotationTypeElementRest", "annotationMethodOrConstantRest", 
                         "annotationMethodRest", "annotationConstantRest", 
                         "defaultValue", "block", "blockStatement", "localVariableDeclarationStatement", 
                         "localVariableDeclaration", "variableModifiers", 
                         "statement", "catches", "catchClause", "formalParameter", 
                         "switchBlock", "switchBlockStatementGroup", "switchLabel", 
                         "forControl", "forInit", "enhancedForControl", 
                         "forUpdate", "parExpression", "expressionList", 
                         "statementExpression", "constantExpression", "expression", 
                         "primary", "creator", "createdName", "innerCreator", 
                         "explicitGenericInvocation", "arrayCreatorRest", 
                         "classCreatorRest", "nonWildcardTypeArguments", 
                         "arguments" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = JavaParser.ruleNames;
        this.literalNames = JavaParser.literalNames;
        this.symbolicNames = JavaParser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 99:
    	    		return this.expression_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 13);
    		case 1:
    			return this.precpred(this._ctx, 12);
    		case 2:
    			return this.precpred(this._ctx, 11);
    		case 3:
    			return this.precpred(this._ctx, 10);
    		case 4:
    			return this.precpred(this._ctx, 8);
    		case 5:
    			return this.precpred(this._ctx, 7);
    		case 6:
    			return this.precpred(this._ctx, 6);
    		case 7:
    			return this.precpred(this._ctx, 5);
    		case 8:
    			return this.precpred(this._ctx, 4);
    		case 9:
    			return this.precpred(this._ctx, 3);
    		case 10:
    			return this.precpred(this._ctx, 2);
    		case 11:
    			return this.precpred(this._ctx, 1);
    		case 12:
    			return this.precpred(this._ctx, 26);
    		case 13:
    			return this.precpred(this._ctx, 25);
    		case 14:
    			return this.precpred(this._ctx, 24);
    		case 15:
    			return this.precpred(this._ctx, 23);
    		case 16:
    			return this.precpred(this._ctx, 22);
    		case 17:
    			return this.precpred(this._ctx, 21);
    		case 18:
    			return this.precpred(this._ctx, 20);
    		case 19:
    			return this.precpred(this._ctx, 19);
    		case 20:
    			return this.precpred(this._ctx, 18);
    		case 21:
    			return this.precpred(this._ctx, 9);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	compilationUnit() {
	    let localctx = new CompilationUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, JavaParser.RULE_compilationUnit);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 219;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1) {
	            this.state = 218;
	            this.packageDeclaration();
	        }

	        this.state = 224;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 221;
	            this.importDeclaration();
	            this.state = 226;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 230;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4258964) !== 0) || _la===49 || _la===96) {
	            this.state = 227;
	            this.typeDeclaration();
	            this.state = 232;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 233;
	        this.match(JavaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packageDeclaration() {
	    let localctx = new PackageDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, JavaParser.RULE_packageDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 235;
	        this.match(JavaParser.T__0);
	        this.state = 236;
	        this.qualifiedName();
	        this.state = 237;
	        this.match(JavaParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importDeclaration() {
	    let localctx = new ImportDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, JavaParser.RULE_importDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 239;
	        this.match(JavaParser.T__2);
	        this.state = 241;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===4) {
	            this.state = 240;
	            this.match(JavaParser.T__3);
	        }

	        this.state = 243;
	        this.qualifiedName();
	        this.state = 246;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===5) {
	            this.state = 244;
	            this.match(JavaParser.T__4);
	            this.state = 245;
	            this.match(JavaParser.T__5);
	        }

	        this.state = 248;
	        this.match(JavaParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeDeclaration() {
	    let localctx = new TypeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, JavaParser.RULE_typeDeclaration);
	    try {
	        this.state = 262;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 4:
	        case 7:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 22:
	        case 49:
	        case 96:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 253;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,5,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 250;
	                    this.classOrInterfaceModifier(); 
	                }
	                this.state = 255;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,5,this._ctx);
	            }

	            this.state = 259;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 7:
	                this.state = 256;
	                this.classDeclaration();
	                break;
	            case 22:
	            case 49:
	                this.state = 257;
	                this.interfaceDeclaration();
	                break;
	            case 96:
	                this.state = 258;
	                this.enumDeclaration();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 261;
	            this.match(JavaParser.T__1);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classDeclaration() {
	    let localctx = new ClassDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, JavaParser.RULE_classDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 264;
	        this.match(JavaParser.T__6);
	        this.state = 265;
	        this.match(JavaParser.Identifier);
	        this.state = 267;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===16) {
	            this.state = 266;
	            this.typeParameters();
	        }

	        this.state = 271;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===8) {
	            this.state = 269;
	            this.match(JavaParser.T__7);
	            this.state = 270;
	            this.type();
	        }

	        this.state = 275;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===9) {
	            this.state = 273;
	            this.match(JavaParser.T__8);
	            this.state = 274;
	            this.typeList();
	        }

	        this.state = 277;
	        this.classBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumDeclaration() {
	    let localctx = new EnumDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, JavaParser.RULE_enumDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 279;
	        this.match(JavaParser.ENUM);
	        this.state = 280;
	        this.match(JavaParser.Identifier);
	        this.state = 283;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===9) {
	            this.state = 281;
	            this.match(JavaParser.T__8);
	            this.state = 282;
	            this.typeList();
	        }

	        this.state = 285;
	        this.enumBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceDeclaration() {
	    let localctx = new InterfaceDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, JavaParser.RULE_interfaceDeclaration);
	    try {
	        this.state = 289;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 22:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 287;
	            this.normalInterfaceDeclaration();
	            break;
	        case 49:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 288;
	            this.annotationTypeDeclaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classOrInterfaceModifier() {
	    let localctx = new ClassOrInterfaceModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, JavaParser.RULE_classOrInterfaceModifier);
	    try {
	        this.state = 299;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 49:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 291;
	            this.annotation();
	            break;
	        case 10:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 292;
	            this.match(JavaParser.T__9);
	            break;
	        case 11:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 293;
	            this.match(JavaParser.T__10);
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 294;
	            this.match(JavaParser.T__11);
	            break;
	        case 13:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 295;
	            this.match(JavaParser.T__12);
	            break;
	        case 4:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 296;
	            this.match(JavaParser.T__3);
	            break;
	        case 14:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 297;
	            this.match(JavaParser.T__13);
	            break;
	        case 15:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 298;
	            this.match(JavaParser.T__14);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modifiers() {
	    let localctx = new ModifiersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, JavaParser.RULE_modifiers);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 304;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,14,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 301;
	                this.modifier(); 
	            }
	            this.state = 306;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,14,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameters() {
	    let localctx = new TypeParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, JavaParser.RULE_typeParameters);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 307;
	        this.match(JavaParser.T__15);
	        this.state = 308;
	        this.typeParameter();
	        this.state = 313;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===17) {
	            this.state = 309;
	            this.match(JavaParser.T__16);
	            this.state = 310;
	            this.typeParameter();
	            this.state = 315;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 316;
	        this.match(JavaParser.T__17);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameter() {
	    let localctx = new TypeParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, JavaParser.RULE_typeParameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 318;
	        this.match(JavaParser.Identifier);
	        this.state = 321;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===8) {
	            this.state = 319;
	            this.match(JavaParser.T__7);
	            this.state = 320;
	            this.typeBound();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeBound() {
	    let localctx = new TypeBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, JavaParser.RULE_typeBound);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 323;
	        this.type();
	        this.state = 328;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===19) {
	            this.state = 324;
	            this.match(JavaParser.T__18);
	            this.state = 325;
	            this.type();
	            this.state = 330;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumBody() {
	    let localctx = new EnumBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, JavaParser.RULE_enumBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 331;
	        this.match(JavaParser.T__19);
	        this.state = 333;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49 || _la===98) {
	            this.state = 332;
	            this.enumConstants();
	        }

	        this.state = 336;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17) {
	            this.state = 335;
	            this.match(JavaParser.T__16);
	        }

	        this.state = 339;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 338;
	            this.enumBodyDeclarations();
	        }

	        this.state = 341;
	        this.match(JavaParser.T__20);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumConstants() {
	    let localctx = new EnumConstantsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, JavaParser.RULE_enumConstants);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 343;
	        this.enumConstant();
	        this.state = 348;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 344;
	                this.match(JavaParser.T__16);
	                this.state = 345;
	                this.enumConstant(); 
	            }
	            this.state = 350;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumConstant() {
	    let localctx = new EnumConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, JavaParser.RULE_enumConstant);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 352;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 351;
	            this.annotations();
	        }

	        this.state = 354;
	        this.match(JavaParser.Identifier);
	        this.state = 356;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===42) {
	            this.state = 355;
	            this.arguments();
	        }

	        this.state = 359;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 358;
	            this.classBody();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumBodyDeclarations() {
	    let localctx = new EnumBodyDeclarationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, JavaParser.RULE_enumBodyDeclarations);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 361;
	        this.match(JavaParser.T__1);
	        this.state = 365;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4065459348) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 131327) !== 0) || _la===98) {
	            this.state = 362;
	            this.classBodyDeclaration();
	            this.state = 367;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalInterfaceDeclaration() {
	    let localctx = new NormalInterfaceDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, JavaParser.RULE_normalInterfaceDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 368;
	        this.match(JavaParser.T__21);
	        this.state = 369;
	        this.match(JavaParser.Identifier);
	        this.state = 371;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===16) {
	            this.state = 370;
	            this.typeParameters();
	        }

	        this.state = 375;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===8) {
	            this.state = 373;
	            this.match(JavaParser.T__7);
	            this.state = 374;
	            this.typeList();
	        }

	        this.state = 377;
	        this.interfaceBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeList() {
	    let localctx = new TypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, JavaParser.RULE_typeList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 379;
	        this.type();
	        this.state = 384;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===17) {
	            this.state = 380;
	            this.match(JavaParser.T__16);
	            this.state = 381;
	            this.type();
	            this.state = 386;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classBody() {
	    let localctx = new ClassBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, JavaParser.RULE_classBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 387;
	        this.match(JavaParser.T__19);
	        this.state = 391;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4065459348) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 131327) !== 0) || _la===98) {
	            this.state = 388;
	            this.classBodyDeclaration();
	            this.state = 393;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 394;
	        this.match(JavaParser.T__20);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceBody() {
	    let localctx = new InterfaceBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, JavaParser.RULE_interfaceBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 396;
	        this.match(JavaParser.T__19);
	        this.state = 400;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4064410772) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 131327) !== 0) || _la===98) {
	            this.state = 397;
	            this.interfaceBodyDeclaration();
	            this.state = 402;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 403;
	        this.match(JavaParser.T__20);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classBodyDeclaration() {
	    let localctx = new ClassBodyDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, JavaParser.RULE_classBodyDeclaration);
	    var _la = 0;
	    try {
	        this.state = 413;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 405;
	            this.match(JavaParser.T__1);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 407;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===4) {
	                this.state = 406;
	                this.match(JavaParser.T__3);
	            }

	            this.state = 409;
	            this.block();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 410;
	            this.modifiers();
	            this.state = 411;
	            this.member();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	member() {
	    let localctx = new MemberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, JavaParser.RULE_member);
	    try {
	        this.state = 421;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 415;
	            this.genericMethodDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 416;
	            this.methodDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 417;
	            this.fieldDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 418;
	            this.constructorDeclaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 419;
	            this.interfaceDeclaration();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 420;
	            this.classDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodDeclaration() {
	    let localctx = new MethodDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, JavaParser.RULE_methodDeclaration);
	    var _la = 0;
	    try {
	        this.state = 440;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 98:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 423;
	            this.type();
	            this.state = 424;
	            this.match(JavaParser.Identifier);
	            this.state = 425;
	            this.formalParameters();
	            this.state = 430;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===23) {
	                this.state = 426;
	                this.match(JavaParser.T__22);
	                this.state = 427;
	                this.match(JavaParser.T__23);
	                this.state = 432;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 433;
	            this.methodDeclarationRest();
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 435;
	            this.match(JavaParser.T__24);
	            this.state = 436;
	            this.match(JavaParser.Identifier);
	            this.state = 437;
	            this.formalParameters();
	            this.state = 438;
	            this.methodDeclarationRest();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodDeclarationRest() {
	    let localctx = new MethodDeclarationRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, JavaParser.RULE_methodDeclarationRest);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 444;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===26) {
	            this.state = 442;
	            this.match(JavaParser.T__25);
	            this.state = 443;
	            this.qualifiedNameList();
	        }

	        this.state = 448;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 20:
	            this.state = 446;
	            this.methodBody();
	            break;
	        case 2:
	            this.state = 447;
	            this.match(JavaParser.T__1);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genericMethodDeclaration() {
	    let localctx = new GenericMethodDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, JavaParser.RULE_genericMethodDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 450;
	        this.typeParameters();
	        this.state = 451;
	        this.methodDeclaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldDeclaration() {
	    let localctx = new FieldDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, JavaParser.RULE_fieldDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 453;
	        this.type();
	        this.state = 454;
	        this.variableDeclarators();
	        this.state = 455;
	        this.match(JavaParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructorDeclaration() {
	    let localctx = new ConstructorDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, JavaParser.RULE_constructorDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 458;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===16) {
	            this.state = 457;
	            this.typeParameters();
	        }

	        this.state = 460;
	        this.match(JavaParser.Identifier);
	        this.state = 461;
	        this.formalParameters();
	        this.state = 464;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===26) {
	            this.state = 462;
	            this.match(JavaParser.T__25);
	            this.state = 463;
	            this.qualifiedNameList();
	        }

	        this.state = 466;
	        this.constructorBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceBodyDeclaration() {
	    let localctx = new InterfaceBodyDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, JavaParser.RULE_interfaceBodyDeclaration);
	    try {
	        this.state = 472;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 4:
	        case 7:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 22:
	        case 25:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 49:
	        case 98:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 468;
	            this.modifiers();
	            this.state = 469;
	            this.interfaceMemberDecl();
	            break;
	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 471;
	            this.match(JavaParser.T__1);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceMemberDecl() {
	    let localctx = new InterfaceMemberDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, JavaParser.RULE_interfaceMemberDecl);
	    try {
	        this.state = 481;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 98:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 474;
	            this.interfaceMethodOrFieldDecl();
	            break;
	        case 16:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 475;
	            this.interfaceGenericMethodDecl();
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 476;
	            this.match(JavaParser.T__24);
	            this.state = 477;
	            this.match(JavaParser.Identifier);
	            this.state = 478;
	            this.voidInterfaceMethodDeclaratorRest();
	            break;
	        case 22:
	        case 49:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 479;
	            this.interfaceDeclaration();
	            break;
	        case 7:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 480;
	            this.classDeclaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceMethodOrFieldDecl() {
	    let localctx = new InterfaceMethodOrFieldDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, JavaParser.RULE_interfaceMethodOrFieldDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 483;
	        this.type();
	        this.state = 484;
	        this.match(JavaParser.Identifier);
	        this.state = 485;
	        this.interfaceMethodOrFieldRest();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceMethodOrFieldRest() {
	    let localctx = new InterfaceMethodOrFieldRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, JavaParser.RULE_interfaceMethodOrFieldRest);
	    try {
	        this.state = 491;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 23:
	        case 27:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 487;
	            this.constantDeclaratorsRest();
	            this.state = 488;
	            this.match(JavaParser.T__1);
	            break;
	        case 42:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 490;
	            this.interfaceMethodDeclaratorRest();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	voidMethodDeclaratorRest() {
	    let localctx = new VoidMethodDeclaratorRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, JavaParser.RULE_voidMethodDeclaratorRest);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 493;
	        this.formalParameters();
	        this.state = 496;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===26) {
	            this.state = 494;
	            this.match(JavaParser.T__25);
	            this.state = 495;
	            this.qualifiedNameList();
	        }

	        this.state = 500;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 20:
	            this.state = 498;
	            this.methodBody();
	            break;
	        case 2:
	            this.state = 499;
	            this.match(JavaParser.T__1);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceMethodDeclaratorRest() {
	    let localctx = new InterfaceMethodDeclaratorRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, JavaParser.RULE_interfaceMethodDeclaratorRest);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 502;
	        this.formalParameters();
	        this.state = 507;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23) {
	            this.state = 503;
	            this.match(JavaParser.T__22);
	            this.state = 504;
	            this.match(JavaParser.T__23);
	            this.state = 509;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 512;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===26) {
	            this.state = 510;
	            this.match(JavaParser.T__25);
	            this.state = 511;
	            this.qualifiedNameList();
	        }

	        this.state = 514;
	        this.match(JavaParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceGenericMethodDecl() {
	    let localctx = new InterfaceGenericMethodDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, JavaParser.RULE_interfaceGenericMethodDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 516;
	        this.typeParameters();
	        this.state = 519;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 98:
	            this.state = 517;
	            this.type();
	            break;
	        case 25:
	            this.state = 518;
	            this.match(JavaParser.T__24);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 521;
	        this.match(JavaParser.Identifier);
	        this.state = 522;
	        this.interfaceMethodDeclaratorRest();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	voidInterfaceMethodDeclaratorRest() {
	    let localctx = new VoidInterfaceMethodDeclaratorRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, JavaParser.RULE_voidInterfaceMethodDeclaratorRest);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 524;
	        this.formalParameters();
	        this.state = 527;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===26) {
	            this.state = 525;
	            this.match(JavaParser.T__25);
	            this.state = 526;
	            this.qualifiedNameList();
	        }

	        this.state = 529;
	        this.match(JavaParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantDeclarator() {
	    let localctx = new ConstantDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, JavaParser.RULE_constantDeclarator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 531;
	        this.match(JavaParser.Identifier);
	        this.state = 532;
	        this.constantDeclaratorRest();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclarators() {
	    let localctx = new VariableDeclaratorsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, JavaParser.RULE_variableDeclarators);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 534;
	        this.variableDeclarator();
	        this.state = 539;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===17) {
	            this.state = 535;
	            this.match(JavaParser.T__16);
	            this.state = 536;
	            this.variableDeclarator();
	            this.state = 541;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclarator() {
	    let localctx = new VariableDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, JavaParser.RULE_variableDeclarator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 542;
	        this.variableDeclaratorId();
	        this.state = 545;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===27) {
	            this.state = 543;
	            this.match(JavaParser.T__26);
	            this.state = 544;
	            this.variableInitializer();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantDeclaratorsRest() {
	    let localctx = new ConstantDeclaratorsRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, JavaParser.RULE_constantDeclaratorsRest);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 547;
	        this.constantDeclaratorRest();
	        this.state = 552;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===17) {
	            this.state = 548;
	            this.match(JavaParser.T__16);
	            this.state = 549;
	            this.constantDeclarator();
	            this.state = 554;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantDeclaratorRest() {
	    let localctx = new ConstantDeclaratorRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, JavaParser.RULE_constantDeclaratorRest);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 559;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23) {
	            this.state = 555;
	            this.match(JavaParser.T__22);
	            this.state = 556;
	            this.match(JavaParser.T__23);
	            this.state = 561;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 562;
	        this.match(JavaParser.T__26);
	        this.state = 563;
	        this.variableInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclaratorId() {
	    let localctx = new VariableDeclaratorIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, JavaParser.RULE_variableDeclaratorId);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 565;
	        this.match(JavaParser.Identifier);
	        this.state = 570;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23) {
	            this.state = 566;
	            this.match(JavaParser.T__22);
	            this.state = 567;
	            this.match(JavaParser.T__23);
	            this.state = 572;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableInitializer() {
	    let localctx = new VariableInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, JavaParser.RULE_variableInitializer);
	    try {
	        this.state = 575;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 20:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 573;
	            this.arrayInitializer();
	            break;
	        case 25:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 41:
	        case 42:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 98:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 574;
	            this.expression(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayInitializer() {
	    let localctx = new ArrayInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, JavaParser.RULE_arrayInitializer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 577;
	        this.match(JavaParser.T__19);
	        this.state = 589;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 20)) & ~0x1f) === 0 && ((1 << (_la - 20)) & 510652449) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 1056964735) !== 0) || _la===98) {
	            this.state = 578;
	            this.variableInitializer();
	            this.state = 583;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,55,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 579;
	                    this.match(JavaParser.T__16);
	                    this.state = 580;
	                    this.variableInitializer(); 
	                }
	                this.state = 585;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,55,this._ctx);
	            }

	            this.state = 587;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===17) {
	                this.state = 586;
	                this.match(JavaParser.T__16);
	            }

	        }

	        this.state = 591;
	        this.match(JavaParser.T__20);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modifier() {
	    let localctx = new ModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, JavaParser.RULE_modifier);
	    try {
	        this.state = 605;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 49:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 593;
	            this.annotation();
	            break;
	        case 10:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 594;
	            this.match(JavaParser.T__9);
	            break;
	        case 11:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 595;
	            this.match(JavaParser.T__10);
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 596;
	            this.match(JavaParser.T__11);
	            break;
	        case 4:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 597;
	            this.match(JavaParser.T__3);
	            break;
	        case 13:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 598;
	            this.match(JavaParser.T__12);
	            break;
	        case 14:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 599;
	            this.match(JavaParser.T__13);
	            break;
	        case 28:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 600;
	            this.match(JavaParser.T__27);
	            break;
	        case 29:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 601;
	            this.match(JavaParser.T__28);
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 602;
	            this.match(JavaParser.T__29);
	            break;
	        case 31:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 603;
	            this.match(JavaParser.T__30);
	            break;
	        case 15:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 604;
	            this.match(JavaParser.T__14);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packageOrTypeName() {
	    let localctx = new PackageOrTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, JavaParser.RULE_packageOrTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 607;
	        this.qualifiedName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumConstantName() {
	    let localctx = new EnumConstantNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, JavaParser.RULE_enumConstantName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 609;
	        this.match(JavaParser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeName() {
	    let localctx = new TypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, JavaParser.RULE_typeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 611;
	        this.qualifiedName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type() {
	    let localctx = new TypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, JavaParser.RULE_type);
	    try {
	        this.state = 629;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 98:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 613;
	            this.classOrInterfaceType();
	            this.state = 618;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,59,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 614;
	                    this.match(JavaParser.T__22);
	                    this.state = 615;
	                    this.match(JavaParser.T__23); 
	                }
	                this.state = 620;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,59,this._ctx);
	            }

	            break;
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 621;
	            this.primitiveType();
	            this.state = 626;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,60,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 622;
	                    this.match(JavaParser.T__22);
	                    this.state = 623;
	                    this.match(JavaParser.T__23); 
	                }
	                this.state = 628;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,60,this._ctx);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classOrInterfaceType() {
	    let localctx = new ClassOrInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, JavaParser.RULE_classOrInterfaceType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 631;
	        this.match(JavaParser.Identifier);
	        this.state = 633;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	        if(la_===1) {
	            this.state = 632;
	            this.typeArguments();

	        }
	        this.state = 642;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,64,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 635;
	                this.match(JavaParser.T__4);
	                this.state = 636;
	                this.match(JavaParser.Identifier);
	                this.state = 638;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	                if(la_===1) {
	                    this.state = 637;
	                    this.typeArguments();

	                } 
	            }
	            this.state = 644;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,64,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveType() {
	    let localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, JavaParser.RULE_primitiveType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 645;
	        _la = this._input.LA(1);
	        if(!(((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 255) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableModifier() {
	    let localctx = new VariableModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, JavaParser.RULE_variableModifier);
	    try {
	        this.state = 649;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 14:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 647;
	            this.match(JavaParser.T__13);
	            break;
	        case 49:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 648;
	            this.annotation();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArguments() {
	    let localctx = new TypeArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, JavaParser.RULE_typeArguments);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 651;
	        this.match(JavaParser.T__15);
	        this.state = 652;
	        this.typeArgument();
	        this.state = 657;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===17) {
	            this.state = 653;
	            this.match(JavaParser.T__16);
	            this.state = 654;
	            this.typeArgument();
	            this.state = 659;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 660;
	        this.match(JavaParser.T__17);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArgument() {
	    let localctx = new TypeArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, JavaParser.RULE_typeArgument);
	    var _la = 0;
	    try {
	        this.state = 668;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 98:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 662;
	            this.type();
	            break;
	        case 40:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 663;
	            this.match(JavaParser.T__39);
	            this.state = 666;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===8 || _la===41) {
	                this.state = 664;
	                _la = this._input.LA(1);
	                if(!(_la===8 || _la===41)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 665;
	                this.type();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedNameList() {
	    let localctx = new QualifiedNameListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, JavaParser.RULE_qualifiedNameList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 670;
	        this.qualifiedName();
	        this.state = 675;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===17) {
	            this.state = 671;
	            this.match(JavaParser.T__16);
	            this.state = 672;
	            this.qualifiedName();
	            this.state = 677;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameters() {
	    let localctx = new FormalParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, JavaParser.RULE_formalParameters);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 678;
	        this.match(JavaParser.T__41);
	        this.state = 680;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===14 || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 131327) !== 0) || _la===98) {
	            this.state = 679;
	            this.formalParameterDecls();
	        }

	        this.state = 682;
	        this.match(JavaParser.T__42);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterDecls() {
	    let localctx = new FormalParameterDeclsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, JavaParser.RULE_formalParameterDecls);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 684;
	        this.variableModifiers();
	        this.state = 685;
	        this.type();
	        this.state = 686;
	        this.formalParameterDeclsRest();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterDeclsRest() {
	    let localctx = new FormalParameterDeclsRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, JavaParser.RULE_formalParameterDeclsRest);
	    var _la = 0;
	    try {
	        this.state = 695;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 98:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 688;
	            this.variableDeclaratorId();
	            this.state = 691;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===17) {
	                this.state = 689;
	                this.match(JavaParser.T__16);
	                this.state = 690;
	                this.formalParameterDecls();
	            }

	            break;
	        case 44:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 693;
	            this.match(JavaParser.T__43);
	            this.state = 694;
	            this.variableDeclaratorId();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodBody() {
	    let localctx = new MethodBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, JavaParser.RULE_methodBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 697;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructorBody() {
	    let localctx = new ConstructorBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, JavaParser.RULE_constructorBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 699;
	        this.match(JavaParser.T__19);
	        this.state = 701;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	        if(la_===1) {
	            this.state = 700;
	            this.explicitConstructorInvocation();

	        }
	        this.state = 706;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 575684740) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4224968447) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 3204448383) !== 0) || _la===98) {
	            this.state = 703;
	            this.blockStatement();
	            this.state = 708;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 709;
	        this.match(JavaParser.T__20);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explicitConstructorInvocation() {
	    let localctx = new ExplicitConstructorInvocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, JavaParser.RULE_explicitConstructorInvocation);
	    var _la = 0;
	    try {
	        this.state = 727;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 712;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===16) {
	                this.state = 711;
	                this.nonWildcardTypeArguments();
	            }

	            this.state = 714;
	            _la = this._input.LA(1);
	            if(!(_la===41 || _la===45)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 715;
	            this.arguments();
	            this.state = 716;
	            this.match(JavaParser.T__1);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 718;
	            this.primary();
	            this.state = 719;
	            this.match(JavaParser.T__4);
	            this.state = 721;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===16) {
	                this.state = 720;
	                this.nonWildcardTypeArguments();
	            }

	            this.state = 723;
	            this.match(JavaParser.T__40);
	            this.state = 724;
	            this.arguments();
	            this.state = 725;
	            this.match(JavaParser.T__1);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedName() {
	    let localctx = new QualifiedNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, JavaParser.RULE_qualifiedName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 729;
	        this.match(JavaParser.Identifier);
	        this.state = 734;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,78,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 730;
	                this.match(JavaParser.T__4);
	                this.state = 731;
	                this.match(JavaParser.Identifier); 
	            }
	            this.state = 736;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,78,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, JavaParser.RULE_literal);
	    try {
	        this.state = 743;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 90:
	        case 91:
	        case 92:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 737;
	            this.integerLiteral();
	            break;
	        case 93:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 738;
	            this.match(JavaParser.FloatingPointLiteral);
	            break;
	        case 94:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 739;
	            this.match(JavaParser.CharacterLiteral);
	            break;
	        case 95:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 740;
	            this.match(JavaParser.StringLiteral);
	            break;
	        case 47:
	        case 48:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 741;
	            this.booleanLiteral();
	            break;
	        case 46:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 742;
	            this.match(JavaParser.T__45);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integerLiteral() {
	    let localctx = new IntegerLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, JavaParser.RULE_integerLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 745;
	        _la = this._input.LA(1);
	        if(!(((((_la - 90)) & ~0x1f) === 0 && ((1 << (_la - 90)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanLiteral() {
	    let localctx = new BooleanLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, JavaParser.RULE_booleanLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 747;
	        _la = this._input.LA(1);
	        if(!(_la===47 || _la===48)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotations() {
	    let localctx = new AnnotationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, JavaParser.RULE_annotations);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 750; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 749;
	            this.annotation();
	            this.state = 752; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===49);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation() {
	    let localctx = new AnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, JavaParser.RULE_annotation);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 754;
	        this.match(JavaParser.T__48);
	        this.state = 755;
	        this.annotationName();
	        this.state = 762;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===42) {
	            this.state = 756;
	            this.match(JavaParser.T__41);
	            this.state = 759;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
	            if(la_===1) {
	                this.state = 757;
	                this.elementValuePairs();

	            } else if(la_===2) {
	                this.state = 758;
	                this.elementValue();

	            }
	            this.state = 761;
	            this.match(JavaParser.T__42);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationName() {
	    let localctx = new AnnotationNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, JavaParser.RULE_annotationName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 764;
	        this.match(JavaParser.Identifier);
	        this.state = 769;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5) {
	            this.state = 765;
	            this.match(JavaParser.T__4);
	            this.state = 766;
	            this.match(JavaParser.Identifier);
	            this.state = 771;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValuePairs() {
	    let localctx = new ElementValuePairsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, JavaParser.RULE_elementValuePairs);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 772;
	        this.elementValuePair();
	        this.state = 777;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===17) {
	            this.state = 773;
	            this.match(JavaParser.T__16);
	            this.state = 774;
	            this.elementValuePair();
	            this.state = 779;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValuePair() {
	    let localctx = new ElementValuePairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, JavaParser.RULE_elementValuePair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 780;
	        this.match(JavaParser.Identifier);
	        this.state = 781;
	        this.match(JavaParser.T__26);
	        this.state = 782;
	        this.elementValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValue() {
	    let localctx = new ElementValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, JavaParser.RULE_elementValue);
	    try {
	        this.state = 787;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 25:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 41:
	        case 42:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 98:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 784;
	            this.expression(0);
	            break;
	        case 49:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 785;
	            this.annotation();
	            break;
	        case 20:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 786;
	            this.elementValueArrayInitializer();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValueArrayInitializer() {
	    let localctx = new ElementValueArrayInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, JavaParser.RULE_elementValueArrayInitializer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 789;
	        this.match(JavaParser.T__19);
	        this.state = 798;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 20)) & ~0x1f) === 0 && ((1 << (_la - 20)) & 1047523361) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 1056964735) !== 0) || _la===98) {
	            this.state = 790;
	            this.elementValue();
	            this.state = 795;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,86,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 791;
	                    this.match(JavaParser.T__16);
	                    this.state = 792;
	                    this.elementValue(); 
	                }
	                this.state = 797;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,86,this._ctx);
	            }

	        }

	        this.state = 801;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17) {
	            this.state = 800;
	            this.match(JavaParser.T__16);
	        }

	        this.state = 803;
	        this.match(JavaParser.T__20);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationTypeDeclaration() {
	    let localctx = new AnnotationTypeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, JavaParser.RULE_annotationTypeDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 805;
	        this.match(JavaParser.T__48);
	        this.state = 806;
	        this.match(JavaParser.T__21);
	        this.state = 807;
	        this.match(JavaParser.Identifier);
	        this.state = 808;
	        this.annotationTypeBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationTypeBody() {
	    let localctx = new AnnotationTypeBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, JavaParser.RULE_annotationTypeBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 810;
	        this.match(JavaParser.T__19);
	        this.state = 814;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4030790800) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 131327) !== 0) || _la===96 || _la===98) {
	            this.state = 811;
	            this.annotationTypeElementDeclaration();
	            this.state = 816;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 817;
	        this.match(JavaParser.T__20);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationTypeElementDeclaration() {
	    let localctx = new AnnotationTypeElementDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, JavaParser.RULE_annotationTypeElementDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 819;
	        this.modifiers();
	        this.state = 820;
	        this.annotationTypeElementRest();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationTypeElementRest() {
	    let localctx = new AnnotationTypeElementRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, JavaParser.RULE_annotationTypeElementRest);
	    var _la = 0;
	    try {
	        this.state = 842;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 98:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 822;
	            this.type();
	            this.state = 823;
	            this.annotationMethodOrConstantRest();
	            this.state = 824;
	            this.match(JavaParser.T__1);
	            break;
	        case 7:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 826;
	            this.classDeclaration();
	            this.state = 828;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 827;
	                this.match(JavaParser.T__1);
	            }

	            break;
	        case 22:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 830;
	            this.normalInterfaceDeclaration();
	            this.state = 832;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 831;
	                this.match(JavaParser.T__1);
	            }

	            break;
	        case 96:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 834;
	            this.enumDeclaration();
	            this.state = 836;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 835;
	                this.match(JavaParser.T__1);
	            }

	            break;
	        case 49:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 838;
	            this.annotationTypeDeclaration();
	            this.state = 840;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 839;
	                this.match(JavaParser.T__1);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationMethodOrConstantRest() {
	    let localctx = new AnnotationMethodOrConstantRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, JavaParser.RULE_annotationMethodOrConstantRest);
	    try {
	        this.state = 846;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 844;
	            this.annotationMethodRest();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 845;
	            this.annotationConstantRest();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationMethodRest() {
	    let localctx = new AnnotationMethodRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, JavaParser.RULE_annotationMethodRest);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 848;
	        this.match(JavaParser.Identifier);
	        this.state = 849;
	        this.match(JavaParser.T__41);
	        this.state = 850;
	        this.match(JavaParser.T__42);
	        this.state = 852;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===50) {
	            this.state = 851;
	            this.defaultValue();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationConstantRest() {
	    let localctx = new AnnotationConstantRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, JavaParser.RULE_annotationConstantRest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 854;
	        this.variableDeclarators();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultValue() {
	    let localctx = new DefaultValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, JavaParser.RULE_defaultValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 856;
	        this.match(JavaParser.T__49);
	        this.state = 857;
	        this.elementValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, JavaParser.RULE_block);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 859;
	        this.match(JavaParser.T__19);
	        this.state = 863;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 575684740) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4224968447) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 3204448383) !== 0) || _la===98) {
	            this.state = 860;
	            this.blockStatement();
	            this.state = 865;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 866;
	        this.match(JavaParser.T__20);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockStatement() {
	    let localctx = new BlockStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, JavaParser.RULE_blockStatement);
	    try {
	        this.state = 872;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 868;
	            this.localVariableDeclarationStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 869;
	            this.classDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 870;
	            this.interfaceDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 871;
	            this.statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localVariableDeclarationStatement() {
	    let localctx = new LocalVariableDeclarationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, JavaParser.RULE_localVariableDeclarationStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 874;
	        this.localVariableDeclaration();
	        this.state = 875;
	        this.match(JavaParser.T__1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localVariableDeclaration() {
	    let localctx = new LocalVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, JavaParser.RULE_localVariableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 877;
	        this.variableModifiers();
	        this.state = 878;
	        this.type();
	        this.state = 879;
	        this.variableDeclarators();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableModifiers() {
	    let localctx = new VariableModifiersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, JavaParser.RULE_variableModifiers);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 884;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===14 || _la===49) {
	            this.state = 881;
	            this.variableModifier();
	            this.state = 886;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, JavaParser.RULE_statement);
	    var _la = 0;
	    try {
	        this.state = 964;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 887;
	            this.block();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 888;
	            this.match(JavaParser.ASSERT);
	            this.state = 889;
	            this.expression(0);
	            this.state = 892;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===51) {
	                this.state = 890;
	                this.match(JavaParser.T__50);
	                this.state = 891;
	                this.expression(0);
	            }

	            this.state = 894;
	            this.match(JavaParser.T__1);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 896;
	            this.match(JavaParser.T__51);
	            this.state = 897;
	            this.parExpression();
	            this.state = 898;
	            this.statement();
	            this.state = 901;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
	            if(la_===1) {
	                this.state = 899;
	                this.match(JavaParser.T__52);
	                this.state = 900;
	                this.statement();

	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 903;
	            this.match(JavaParser.T__53);
	            this.state = 904;
	            this.match(JavaParser.T__41);
	            this.state = 905;
	            this.forControl();
	            this.state = 906;
	            this.match(JavaParser.T__42);
	            this.state = 907;
	            this.statement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 909;
	            this.match(JavaParser.T__54);
	            this.state = 910;
	            this.parExpression();
	            this.state = 911;
	            this.statement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 913;
	            this.match(JavaParser.T__55);
	            this.state = 914;
	            this.statement();
	            this.state = 915;
	            this.match(JavaParser.T__54);
	            this.state = 916;
	            this.parExpression();
	            this.state = 917;
	            this.match(JavaParser.T__1);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 919;
	            this.match(JavaParser.T__56);
	            this.state = 920;
	            this.block();
	            this.state = 928;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 921;
	                this.catches();
	                this.state = 922;
	                this.match(JavaParser.T__57);
	                this.state = 923;
	                this.block();
	                break;

	            case 2:
	                this.state = 925;
	                this.catches();
	                break;

	            case 3:
	                this.state = 926;
	                this.match(JavaParser.T__57);
	                this.state = 927;
	                this.block();
	                break;

	            }
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 930;
	            this.match(JavaParser.T__58);
	            this.state = 931;
	            this.parExpression();
	            this.state = 932;
	            this.switchBlock();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 934;
	            this.match(JavaParser.T__28);
	            this.state = 935;
	            this.parExpression();
	            this.state = 936;
	            this.block();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 938;
	            this.match(JavaParser.T__59);
	            this.state = 940;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 15957889) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 1056964735) !== 0) || _la===98) {
	                this.state = 939;
	                this.expression(0);
	            }

	            this.state = 942;
	            this.match(JavaParser.T__1);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 943;
	            this.match(JavaParser.T__60);
	            this.state = 944;
	            this.expression(0);
	            this.state = 945;
	            this.match(JavaParser.T__1);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 947;
	            this.match(JavaParser.T__61);
	            this.state = 949;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===98) {
	                this.state = 948;
	                this.match(JavaParser.Identifier);
	            }

	            this.state = 951;
	            this.match(JavaParser.T__1);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 952;
	            this.match(JavaParser.T__62);
	            this.state = 954;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===98) {
	                this.state = 953;
	                this.match(JavaParser.Identifier);
	            }

	            this.state = 956;
	            this.match(JavaParser.T__1);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 957;
	            this.match(JavaParser.T__1);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 958;
	            this.statementExpression();
	            this.state = 959;
	            this.match(JavaParser.T__1);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 961;
	            this.match(JavaParser.Identifier);
	            this.state = 962;
	            this.match(JavaParser.T__50);
	            this.state = 963;
	            this.statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catches() {
	    let localctx = new CatchesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, JavaParser.RULE_catches);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 966;
	        this.catchClause();
	        this.state = 970;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===64) {
	            this.state = 967;
	            this.catchClause();
	            this.state = 972;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchClause() {
	    let localctx = new CatchClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, JavaParser.RULE_catchClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 973;
	        this.match(JavaParser.T__63);
	        this.state = 974;
	        this.match(JavaParser.T__41);
	        this.state = 975;
	        this.formalParameter();
	        this.state = 976;
	        this.match(JavaParser.T__42);
	        this.state = 977;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameter() {
	    let localctx = new FormalParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, JavaParser.RULE_formalParameter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 979;
	        this.variableModifiers();
	        this.state = 980;
	        this.type();
	        this.state = 981;
	        this.variableDeclaratorId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchBlock() {
	    let localctx = new SwitchBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, JavaParser.RULE_switchBlock);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 983;
	        this.match(JavaParser.T__19);
	        this.state = 987;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,108,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 984;
	                this.switchBlockStatementGroup(); 
	            }
	            this.state = 989;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,108,this._ctx);
	        }

	        this.state = 993;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===50 || _la===65) {
	            this.state = 990;
	            this.switchLabel();
	            this.state = 995;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 996;
	        this.match(JavaParser.T__20);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchBlockStatementGroup() {
	    let localctx = new SwitchBlockStatementGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, JavaParser.RULE_switchBlockStatementGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 999; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 998;
	        		this.switchLabel();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1001; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,110, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 1006;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 575684740) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4224968447) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 3204448383) !== 0) || _la===98) {
	            this.state = 1003;
	            this.blockStatement();
	            this.state = 1008;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchLabel() {
	    let localctx = new SwitchLabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, JavaParser.RULE_switchLabel);
	    try {
	        this.state = 1019;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1009;
	            this.match(JavaParser.T__64);
	            this.state = 1010;
	            this.constantExpression();
	            this.state = 1011;
	            this.match(JavaParser.T__50);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1013;
	            this.match(JavaParser.T__64);
	            this.state = 1014;
	            this.enumConstantName();
	            this.state = 1015;
	            this.match(JavaParser.T__50);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1017;
	            this.match(JavaParser.T__49);
	            this.state = 1018;
	            this.match(JavaParser.T__50);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forControl() {
	    let localctx = new ForControlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, JavaParser.RULE_forControl);
	    var _la = 0;
	    try {
	        this.state = 1033;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1021;
	            this.enhancedForControl();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1023;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 14)) & ~0x1f) === 0 && ((1 << (_la - 14)) & 2616985601) !== 0) || ((((_la - 46)) & ~0x1f) === 0 && ((1 << (_la - 46)) & 133169167) !== 0) || ((((_la - 90)) & ~0x1f) === 0 && ((1 << (_la - 90)) & 319) !== 0)) {
	                this.state = 1022;
	                this.forInit();
	            }

	            this.state = 1025;
	            this.match(JavaParser.T__1);
	            this.state = 1027;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 15957889) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 1056964735) !== 0) || _la===98) {
	                this.state = 1026;
	                this.expression(0);
	            }

	            this.state = 1029;
	            this.match(JavaParser.T__1);
	            this.state = 1031;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 15957889) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 1056964735) !== 0) || _la===98) {
	                this.state = 1030;
	                this.forUpdate();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forInit() {
	    let localctx = new ForInitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, JavaParser.RULE_forInit);
	    try {
	        this.state = 1037;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1035;
	            this.localVariableDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1036;
	            this.expressionList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enhancedForControl() {
	    let localctx = new EnhancedForControlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, JavaParser.RULE_enhancedForControl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1039;
	        this.variableModifiers();
	        this.state = 1040;
	        this.type();
	        this.state = 1041;
	        this.match(JavaParser.Identifier);
	        this.state = 1042;
	        this.match(JavaParser.T__50);
	        this.state = 1043;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forUpdate() {
	    let localctx = new ForUpdateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, JavaParser.RULE_forUpdate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1045;
	        this.expressionList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parExpression() {
	    let localctx = new ParExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, JavaParser.RULE_parExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1047;
	        this.match(JavaParser.T__41);
	        this.state = 1048;
	        this.expression(0);
	        this.state = 1049;
	        this.match(JavaParser.T__42);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionList() {
	    let localctx = new ExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, JavaParser.RULE_expressionList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1051;
	        this.expression(0);
	        this.state = 1056;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===17) {
	            this.state = 1052;
	            this.match(JavaParser.T__16);
	            this.state = 1053;
	            this.expression(0);
	            this.state = 1058;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementExpression() {
	    let localctx = new StatementExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, JavaParser.RULE_statementExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1059;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantExpression() {
	    let localctx = new ConstantExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, JavaParser.RULE_constantExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1061;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 198;
	    this.enterRecursionRule(localctx, 198, JavaParser.RULE_expression, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1076;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1064;
	            this.primary();
	            break;

	        case 2:
	            this.state = 1065;
	            _la = this._input.LA(1);
	            if(!(((((_la - 67)) & ~0x1f) === 0 && ((1 << (_la - 67)) & 15) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1066;
	            this.expression(17);
	            break;

	        case 3:
	            this.state = 1067;
	            _la = this._input.LA(1);
	            if(!(_la===71 || _la===72)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1068;
	            this.expression(16);
	            break;

	        case 4:
	            this.state = 1069;
	            this.match(JavaParser.T__41);
	            this.state = 1070;
	            this.type();
	            this.state = 1071;
	            this.match(JavaParser.T__42);
	            this.state = 1072;
	            this.expression(15);
	            break;

	        case 5:
	            this.state = 1074;
	            this.match(JavaParser.T__65);
	            this.state = 1075;
	            this.creator();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1204;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,128,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1202;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1078;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 1079;
	                    _la = this._input.LA(1);
	                    if(!(_la===6 || _la===73 || _la===74)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1080;
	                    this.expression(14);
	                    break;

	                case 2:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1081;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 1082;
	                    _la = this._input.LA(1);
	                    if(!(_la===69 || _la===70)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1083;
	                    this.expression(13);
	                    break;

	                case 3:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1084;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 1092;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 1085;
	                        this.match(JavaParser.T__15);
	                        this.state = 1086;
	                        this.match(JavaParser.T__15);
	                        break;

	                    case 2:
	                        this.state = 1087;
	                        this.match(JavaParser.T__17);
	                        this.state = 1088;
	                        this.match(JavaParser.T__17);
	                        this.state = 1089;
	                        this.match(JavaParser.T__17);
	                        break;

	                    case 3:
	                        this.state = 1090;
	                        this.match(JavaParser.T__17);
	                        this.state = 1091;
	                        this.match(JavaParser.T__17);
	                        break;

	                    }
	                    this.state = 1094;
	                    this.expression(12);
	                    break;

	                case 4:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1095;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 1102;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 1096;
	                        this.match(JavaParser.T__15);
	                        this.state = 1097;
	                        this.match(JavaParser.T__26);
	                        break;

	                    case 2:
	                        this.state = 1098;
	                        this.match(JavaParser.T__17);
	                        this.state = 1099;
	                        this.match(JavaParser.T__26);
	                        break;

	                    case 3:
	                        this.state = 1100;
	                        this.match(JavaParser.T__17);
	                        break;

	                    case 4:
	                        this.state = 1101;
	                        this.match(JavaParser.T__15);
	                        break;

	                    }
	                    this.state = 1104;
	                    this.expression(11);
	                    break;

	                case 5:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1105;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 1106;
	                    _la = this._input.LA(1);
	                    if(!(_la===76 || _la===77)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1107;
	                    this.expression(9);
	                    break;

	                case 6:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1108;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 1109;
	                    this.match(JavaParser.T__18);
	                    this.state = 1110;
	                    this.expression(8);
	                    break;

	                case 7:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1111;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 1112;
	                    this.match(JavaParser.T__77);
	                    this.state = 1113;
	                    this.expression(7);
	                    break;

	                case 8:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1114;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 1115;
	                    this.match(JavaParser.T__78);
	                    this.state = 1116;
	                    this.expression(6);
	                    break;

	                case 9:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1117;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 1118;
	                    this.match(JavaParser.T__79);
	                    this.state = 1119;
	                    this.expression(5);
	                    break;

	                case 10:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1120;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 1121;
	                    this.match(JavaParser.T__80);
	                    this.state = 1122;
	                    this.expression(4);
	                    break;

	                case 11:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1123;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 1124;
	                    this.match(JavaParser.T__39);
	                    this.state = 1125;
	                    this.expression(0);
	                    this.state = 1126;
	                    this.match(JavaParser.T__50);
	                    this.state = 1127;
	                    this.expression(3);
	                    break;

	                case 12:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1129;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 1149;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 1130;
	                        this.match(JavaParser.T__81);
	                        break;

	                    case 2:
	                        this.state = 1131;
	                        this.match(JavaParser.T__82);
	                        break;

	                    case 3:
	                        this.state = 1132;
	                        this.match(JavaParser.T__83);
	                        break;

	                    case 4:
	                        this.state = 1133;
	                        this.match(JavaParser.T__84);
	                        break;

	                    case 5:
	                        this.state = 1134;
	                        this.match(JavaParser.T__85);
	                        break;

	                    case 6:
	                        this.state = 1135;
	                        this.match(JavaParser.T__86);
	                        break;

	                    case 7:
	                        this.state = 1136;
	                        this.match(JavaParser.T__87);
	                        break;

	                    case 8:
	                        this.state = 1137;
	                        this.match(JavaParser.T__26);
	                        break;

	                    case 9:
	                        this.state = 1138;
	                        this.match(JavaParser.T__17);
	                        this.state = 1139;
	                        this.match(JavaParser.T__17);
	                        this.state = 1140;
	                        this.match(JavaParser.T__26);
	                        break;

	                    case 10:
	                        this.state = 1141;
	                        this.match(JavaParser.T__17);
	                        this.state = 1142;
	                        this.match(JavaParser.T__17);
	                        this.state = 1143;
	                        this.match(JavaParser.T__17);
	                        this.state = 1144;
	                        this.match(JavaParser.T__26);
	                        break;

	                    case 11:
	                        this.state = 1145;
	                        this.match(JavaParser.T__15);
	                        this.state = 1146;
	                        this.match(JavaParser.T__15);
	                        this.state = 1147;
	                        this.match(JavaParser.T__26);
	                        break;

	                    case 12:
	                        this.state = 1148;
	                        this.match(JavaParser.T__88);
	                        break;

	                    }
	                    this.state = 1151;
	                    this.expression(2);
	                    break;

	                case 13:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1152;
	                    if (!( this.precpred(this._ctx, 26))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
	                    }
	                    this.state = 1153;
	                    this.match(JavaParser.T__4);
	                    this.state = 1154;
	                    this.match(JavaParser.Identifier);
	                    break;

	                case 14:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1155;
	                    if (!( this.precpred(this._ctx, 25))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
	                    }
	                    this.state = 1156;
	                    this.match(JavaParser.T__4);
	                    this.state = 1157;
	                    this.match(JavaParser.T__44);
	                    break;

	                case 15:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1158;
	                    if (!( this.precpred(this._ctx, 24))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
	                    }
	                    this.state = 1159;
	                    this.match(JavaParser.T__4);
	                    this.state = 1160;
	                    this.match(JavaParser.T__40);
	                    this.state = 1161;
	                    this.match(JavaParser.T__41);
	                    this.state = 1163;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 15957889) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 1056964735) !== 0) || _la===98) {
	                        this.state = 1162;
	                        this.expressionList();
	                    }

	                    this.state = 1165;
	                    this.match(JavaParser.T__42);
	                    break;

	                case 16:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1166;
	                    if (!( this.precpred(this._ctx, 23))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
	                    }
	                    this.state = 1167;
	                    this.match(JavaParser.T__4);
	                    this.state = 1168;
	                    this.match(JavaParser.T__65);
	                    this.state = 1169;
	                    this.match(JavaParser.Identifier);
	                    this.state = 1170;
	                    this.match(JavaParser.T__41);
	                    this.state = 1172;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 15957889) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 1056964735) !== 0) || _la===98) {
	                        this.state = 1171;
	                        this.expressionList();
	                    }

	                    this.state = 1174;
	                    this.match(JavaParser.T__42);
	                    break;

	                case 17:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1175;
	                    if (!( this.precpred(this._ctx, 22))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
	                    }
	                    this.state = 1176;
	                    this.match(JavaParser.T__4);
	                    this.state = 1177;
	                    this.match(JavaParser.T__40);
	                    this.state = 1178;
	                    this.match(JavaParser.T__4);
	                    this.state = 1179;
	                    this.match(JavaParser.Identifier);
	                    this.state = 1181;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
	                    if(la_===1) {
	                        this.state = 1180;
	                        this.arguments();

	                    }
	                    break;

	                case 18:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1183;
	                    if (!( this.precpred(this._ctx, 21))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
	                    }
	                    this.state = 1184;
	                    this.match(JavaParser.T__4);
	                    this.state = 1185;
	                    this.explicitGenericInvocation();
	                    break;

	                case 19:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1186;
	                    if (!( this.precpred(this._ctx, 20))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
	                    }
	                    this.state = 1187;
	                    this.match(JavaParser.T__22);
	                    this.state = 1188;
	                    this.expression(0);
	                    this.state = 1189;
	                    this.match(JavaParser.T__23);
	                    break;

	                case 20:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1191;
	                    if (!( this.precpred(this._ctx, 19))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
	                    }
	                    this.state = 1192;
	                    this.match(JavaParser.T__41);
	                    this.state = 1194;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 15957889) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 1056964735) !== 0) || _la===98) {
	                        this.state = 1193;
	                        this.expressionList();
	                    }

	                    this.state = 1196;
	                    this.match(JavaParser.T__42);
	                    break;

	                case 21:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1197;
	                    if (!( this.precpred(this._ctx, 18))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
	                    }
	                    this.state = 1198;
	                    _la = this._input.LA(1);
	                    if(!(_la===67 || _la===68)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    break;

	                case 22:
	                    localctx = new ExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, JavaParser.RULE_expression);
	                    this.state = 1199;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 1200;
	                    this.match(JavaParser.T__74);
	                    this.state = 1201;
	                    this.type();
	                    break;

	                } 
	            }
	            this.state = 1206;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,128,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	primary() {
	    let localctx = new PrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, JavaParser.RULE_primary);
	    try {
	        this.state = 1222;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,129,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1207;
	            this.match(JavaParser.T__41);
	            this.state = 1208;
	            this.expression(0);
	            this.state = 1209;
	            this.match(JavaParser.T__42);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1211;
	            this.match(JavaParser.T__44);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1212;
	            this.match(JavaParser.T__40);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1213;
	            this.literal();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1214;
	            this.match(JavaParser.Identifier);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1215;
	            this.type();
	            this.state = 1216;
	            this.match(JavaParser.T__4);
	            this.state = 1217;
	            this.match(JavaParser.T__6);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1219;
	            this.match(JavaParser.T__24);
	            this.state = 1220;
	            this.match(JavaParser.T__4);
	            this.state = 1221;
	            this.match(JavaParser.T__6);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	creator() {
	    let localctx = new CreatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, JavaParser.RULE_creator);
	    try {
	        this.state = 1233;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 16:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1224;
	            this.nonWildcardTypeArguments();
	            this.state = 1225;
	            this.createdName();
	            this.state = 1226;
	            this.classCreatorRest();
	            break;
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 98:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1228;
	            this.createdName();
	            this.state = 1231;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 23:
	                this.state = 1229;
	                this.arrayCreatorRest();
	                break;
	            case 42:
	                this.state = 1230;
	                this.classCreatorRest();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createdName() {
	    let localctx = new CreatedNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, JavaParser.RULE_createdName);
	    try {
	        this.state = 1237;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 98:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1235;
	            this.classOrInterfaceType();
	            break;
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1236;
	            this.primitiveType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	innerCreator() {
	    let localctx = new InnerCreatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, JavaParser.RULE_innerCreator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1240;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===16) {
	            this.state = 1239;
	            this.nonWildcardTypeArguments();
	        }

	        this.state = 1242;
	        this.match(JavaParser.Identifier);
	        this.state = 1243;
	        this.classCreatorRest();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explicitGenericInvocation() {
	    let localctx = new ExplicitGenericInvocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, JavaParser.RULE_explicitGenericInvocation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1245;
	        this.nonWildcardTypeArguments();
	        this.state = 1246;
	        this.match(JavaParser.Identifier);
	        this.state = 1247;
	        this.arguments();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayCreatorRest() {
	    let localctx = new ArrayCreatorRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, JavaParser.RULE_arrayCreatorRest);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1249;
	        this.match(JavaParser.T__22);
	        this.state = 1277;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 24:
	            this.state = 1250;
	            this.match(JavaParser.T__23);
	            this.state = 1255;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===23) {
	                this.state = 1251;
	                this.match(JavaParser.T__22);
	                this.state = 1252;
	                this.match(JavaParser.T__23);
	                this.state = 1257;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1258;
	            this.arrayInitializer();
	            break;
	        case 25:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 41:
	        case 42:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 98:
	            this.state = 1259;
	            this.expression(0);
	            this.state = 1260;
	            this.match(JavaParser.T__23);
	            this.state = 1267;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,135,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1261;
	                    this.match(JavaParser.T__22);
	                    this.state = 1262;
	                    this.expression(0);
	                    this.state = 1263;
	                    this.match(JavaParser.T__23); 
	                }
	                this.state = 1269;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,135,this._ctx);
	            }

	            this.state = 1274;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,136,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1270;
	                    this.match(JavaParser.T__22);
	                    this.state = 1271;
	                    this.match(JavaParser.T__23); 
	                }
	                this.state = 1276;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,136,this._ctx);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classCreatorRest() {
	    let localctx = new ClassCreatorRestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, JavaParser.RULE_classCreatorRest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1279;
	        this.arguments();
	        this.state = 1281;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,138,this._ctx);
	        if(la_===1) {
	            this.state = 1280;
	            this.classBody();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonWildcardTypeArguments() {
	    let localctx = new NonWildcardTypeArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, JavaParser.RULE_nonWildcardTypeArguments);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1283;
	        this.match(JavaParser.T__15);
	        this.state = 1284;
	        this.typeList();
	        this.state = 1285;
	        this.match(JavaParser.T__17);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arguments() {
	    let localctx = new ArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, JavaParser.RULE_arguments);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1287;
	        this.match(JavaParser.T__41);
	        this.state = 1289;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 15957889) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 1056964735) !== 0) || _la===98) {
	            this.state = 1288;
	            this.expressionList();
	        }

	        this.state = 1291;
	        this.match(JavaParser.T__42);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

JavaParser.EOF = antlr4.Token.EOF;
JavaParser.T__0 = 1;
JavaParser.T__1 = 2;
JavaParser.T__2 = 3;
JavaParser.T__3 = 4;
JavaParser.T__4 = 5;
JavaParser.T__5 = 6;
JavaParser.T__6 = 7;
JavaParser.T__7 = 8;
JavaParser.T__8 = 9;
JavaParser.T__9 = 10;
JavaParser.T__10 = 11;
JavaParser.T__11 = 12;
JavaParser.T__12 = 13;
JavaParser.T__13 = 14;
JavaParser.T__14 = 15;
JavaParser.T__15 = 16;
JavaParser.T__16 = 17;
JavaParser.T__17 = 18;
JavaParser.T__18 = 19;
JavaParser.T__19 = 20;
JavaParser.T__20 = 21;
JavaParser.T__21 = 22;
JavaParser.T__22 = 23;
JavaParser.T__23 = 24;
JavaParser.T__24 = 25;
JavaParser.T__25 = 26;
JavaParser.T__26 = 27;
JavaParser.T__27 = 28;
JavaParser.T__28 = 29;
JavaParser.T__29 = 30;
JavaParser.T__30 = 31;
JavaParser.T__31 = 32;
JavaParser.T__32 = 33;
JavaParser.T__33 = 34;
JavaParser.T__34 = 35;
JavaParser.T__35 = 36;
JavaParser.T__36 = 37;
JavaParser.T__37 = 38;
JavaParser.T__38 = 39;
JavaParser.T__39 = 40;
JavaParser.T__40 = 41;
JavaParser.T__41 = 42;
JavaParser.T__42 = 43;
JavaParser.T__43 = 44;
JavaParser.T__44 = 45;
JavaParser.T__45 = 46;
JavaParser.T__46 = 47;
JavaParser.T__47 = 48;
JavaParser.T__48 = 49;
JavaParser.T__49 = 50;
JavaParser.T__50 = 51;
JavaParser.T__51 = 52;
JavaParser.T__52 = 53;
JavaParser.T__53 = 54;
JavaParser.T__54 = 55;
JavaParser.T__55 = 56;
JavaParser.T__56 = 57;
JavaParser.T__57 = 58;
JavaParser.T__58 = 59;
JavaParser.T__59 = 60;
JavaParser.T__60 = 61;
JavaParser.T__61 = 62;
JavaParser.T__62 = 63;
JavaParser.T__63 = 64;
JavaParser.T__64 = 65;
JavaParser.T__65 = 66;
JavaParser.T__66 = 67;
JavaParser.T__67 = 68;
JavaParser.T__68 = 69;
JavaParser.T__69 = 70;
JavaParser.T__70 = 71;
JavaParser.T__71 = 72;
JavaParser.T__72 = 73;
JavaParser.T__73 = 74;
JavaParser.T__74 = 75;
JavaParser.T__75 = 76;
JavaParser.T__76 = 77;
JavaParser.T__77 = 78;
JavaParser.T__78 = 79;
JavaParser.T__79 = 80;
JavaParser.T__80 = 81;
JavaParser.T__81 = 82;
JavaParser.T__82 = 83;
JavaParser.T__83 = 84;
JavaParser.T__84 = 85;
JavaParser.T__85 = 86;
JavaParser.T__86 = 87;
JavaParser.T__87 = 88;
JavaParser.T__88 = 89;
JavaParser.HexLiteral = 90;
JavaParser.DecimalLiteral = 91;
JavaParser.OctalLiteral = 92;
JavaParser.FloatingPointLiteral = 93;
JavaParser.CharacterLiteral = 94;
JavaParser.StringLiteral = 95;
JavaParser.ENUM = 96;
JavaParser.ASSERT = 97;
JavaParser.Identifier = 98;
JavaParser.COMMENT = 99;
JavaParser.WS = 100;
JavaParser.LINE_COMMENT = 101;

JavaParser.RULE_compilationUnit = 0;
JavaParser.RULE_packageDeclaration = 1;
JavaParser.RULE_importDeclaration = 2;
JavaParser.RULE_typeDeclaration = 3;
JavaParser.RULE_classDeclaration = 4;
JavaParser.RULE_enumDeclaration = 5;
JavaParser.RULE_interfaceDeclaration = 6;
JavaParser.RULE_classOrInterfaceModifier = 7;
JavaParser.RULE_modifiers = 8;
JavaParser.RULE_typeParameters = 9;
JavaParser.RULE_typeParameter = 10;
JavaParser.RULE_typeBound = 11;
JavaParser.RULE_enumBody = 12;
JavaParser.RULE_enumConstants = 13;
JavaParser.RULE_enumConstant = 14;
JavaParser.RULE_enumBodyDeclarations = 15;
JavaParser.RULE_normalInterfaceDeclaration = 16;
JavaParser.RULE_typeList = 17;
JavaParser.RULE_classBody = 18;
JavaParser.RULE_interfaceBody = 19;
JavaParser.RULE_classBodyDeclaration = 20;
JavaParser.RULE_member = 21;
JavaParser.RULE_methodDeclaration = 22;
JavaParser.RULE_methodDeclarationRest = 23;
JavaParser.RULE_genericMethodDeclaration = 24;
JavaParser.RULE_fieldDeclaration = 25;
JavaParser.RULE_constructorDeclaration = 26;
JavaParser.RULE_interfaceBodyDeclaration = 27;
JavaParser.RULE_interfaceMemberDecl = 28;
JavaParser.RULE_interfaceMethodOrFieldDecl = 29;
JavaParser.RULE_interfaceMethodOrFieldRest = 30;
JavaParser.RULE_voidMethodDeclaratorRest = 31;
JavaParser.RULE_interfaceMethodDeclaratorRest = 32;
JavaParser.RULE_interfaceGenericMethodDecl = 33;
JavaParser.RULE_voidInterfaceMethodDeclaratorRest = 34;
JavaParser.RULE_constantDeclarator = 35;
JavaParser.RULE_variableDeclarators = 36;
JavaParser.RULE_variableDeclarator = 37;
JavaParser.RULE_constantDeclaratorsRest = 38;
JavaParser.RULE_constantDeclaratorRest = 39;
JavaParser.RULE_variableDeclaratorId = 40;
JavaParser.RULE_variableInitializer = 41;
JavaParser.RULE_arrayInitializer = 42;
JavaParser.RULE_modifier = 43;
JavaParser.RULE_packageOrTypeName = 44;
JavaParser.RULE_enumConstantName = 45;
JavaParser.RULE_typeName = 46;
JavaParser.RULE_type = 47;
JavaParser.RULE_classOrInterfaceType = 48;
JavaParser.RULE_primitiveType = 49;
JavaParser.RULE_variableModifier = 50;
JavaParser.RULE_typeArguments = 51;
JavaParser.RULE_typeArgument = 52;
JavaParser.RULE_qualifiedNameList = 53;
JavaParser.RULE_formalParameters = 54;
JavaParser.RULE_formalParameterDecls = 55;
JavaParser.RULE_formalParameterDeclsRest = 56;
JavaParser.RULE_methodBody = 57;
JavaParser.RULE_constructorBody = 58;
JavaParser.RULE_explicitConstructorInvocation = 59;
JavaParser.RULE_qualifiedName = 60;
JavaParser.RULE_literal = 61;
JavaParser.RULE_integerLiteral = 62;
JavaParser.RULE_booleanLiteral = 63;
JavaParser.RULE_annotations = 64;
JavaParser.RULE_annotation = 65;
JavaParser.RULE_annotationName = 66;
JavaParser.RULE_elementValuePairs = 67;
JavaParser.RULE_elementValuePair = 68;
JavaParser.RULE_elementValue = 69;
JavaParser.RULE_elementValueArrayInitializer = 70;
JavaParser.RULE_annotationTypeDeclaration = 71;
JavaParser.RULE_annotationTypeBody = 72;
JavaParser.RULE_annotationTypeElementDeclaration = 73;
JavaParser.RULE_annotationTypeElementRest = 74;
JavaParser.RULE_annotationMethodOrConstantRest = 75;
JavaParser.RULE_annotationMethodRest = 76;
JavaParser.RULE_annotationConstantRest = 77;
JavaParser.RULE_defaultValue = 78;
JavaParser.RULE_block = 79;
JavaParser.RULE_blockStatement = 80;
JavaParser.RULE_localVariableDeclarationStatement = 81;
JavaParser.RULE_localVariableDeclaration = 82;
JavaParser.RULE_variableModifiers = 83;
JavaParser.RULE_statement = 84;
JavaParser.RULE_catches = 85;
JavaParser.RULE_catchClause = 86;
JavaParser.RULE_formalParameter = 87;
JavaParser.RULE_switchBlock = 88;
JavaParser.RULE_switchBlockStatementGroup = 89;
JavaParser.RULE_switchLabel = 90;
JavaParser.RULE_forControl = 91;
JavaParser.RULE_forInit = 92;
JavaParser.RULE_enhancedForControl = 93;
JavaParser.RULE_forUpdate = 94;
JavaParser.RULE_parExpression = 95;
JavaParser.RULE_expressionList = 96;
JavaParser.RULE_statementExpression = 97;
JavaParser.RULE_constantExpression = 98;
JavaParser.RULE_expression = 99;
JavaParser.RULE_primary = 100;
JavaParser.RULE_creator = 101;
JavaParser.RULE_createdName = 102;
JavaParser.RULE_innerCreator = 103;
JavaParser.RULE_explicitGenericInvocation = 104;
JavaParser.RULE_arrayCreatorRest = 105;
JavaParser.RULE_classCreatorRest = 106;
JavaParser.RULE_nonWildcardTypeArguments = 107;
JavaParser.RULE_arguments = 108;

class CompilationUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_compilationUnit;
    }

	EOF() {
	    return this.getToken(JavaParser.EOF, 0);
	};

	packageDeclaration() {
	    return this.getTypedRuleContext(PackageDeclarationContext,0);
	};

	importDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImportDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ImportDeclarationContext,i);
	    }
	};

	typeDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(TypeDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterCompilationUnit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitCompilationUnit(this);
		}
	}


}



class PackageDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_packageDeclaration;
    }

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterPackageDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitPackageDeclaration(this);
		}
	}


}



class ImportDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_importDeclaration;
    }

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterImportDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitImportDeclaration(this);
		}
	}


}



class TypeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_typeDeclaration;
    }

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	enumDeclaration() {
	    return this.getTypedRuleContext(EnumDeclarationContext,0);
	};

	classOrInterfaceModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassOrInterfaceModifierContext);
	    } else {
	        return this.getTypedRuleContext(ClassOrInterfaceModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterTypeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitTypeDeclaration(this);
		}
	}


}



class ClassDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_classDeclaration;
    }

	Identifier() {
	    return this.getToken(JavaParser.Identifier, 0);
	};

	classBody() {
	    return this.getTypedRuleContext(ClassBodyContext,0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	typeList() {
	    return this.getTypedRuleContext(TypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterClassDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitClassDeclaration(this);
		}
	}


}



class EnumDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_enumDeclaration;
    }

	ENUM() {
	    return this.getToken(JavaParser.ENUM, 0);
	};

	Identifier() {
	    return this.getToken(JavaParser.Identifier, 0);
	};

	enumBody() {
	    return this.getTypedRuleContext(EnumBodyContext,0);
	};

	typeList() {
	    return this.getTypedRuleContext(TypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterEnumDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitEnumDeclaration(this);
		}
	}


}



class InterfaceDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_interfaceDeclaration;
    }

	normalInterfaceDeclaration() {
	    return this.getTypedRuleContext(NormalInterfaceDeclarationContext,0);
	};

	annotationTypeDeclaration() {
	    return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterInterfaceDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitInterfaceDeclaration(this);
		}
	}


}



class ClassOrInterfaceModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_classOrInterfaceModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterClassOrInterfaceModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitClassOrInterfaceModifier(this);
		}
	}


}



class ModifiersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_modifiers;
    }

	modifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModifierContext);
	    } else {
	        return this.getTypedRuleContext(ModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterModifiers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitModifiers(this);
		}
	}


}



class TypeParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_typeParameters;
    }

	typeParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeParameterContext);
	    } else {
	        return this.getTypedRuleContext(TypeParameterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterTypeParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitTypeParameters(this);
		}
	}


}



class TypeParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_typeParameter;
    }

	Identifier() {
	    return this.getToken(JavaParser.Identifier, 0);
	};

	typeBound() {
	    return this.getTypedRuleContext(TypeBoundContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterTypeParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitTypeParameter(this);
		}
	}


}



class TypeBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_typeBound;
    }

	type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeContext);
	    } else {
	        return this.getTypedRuleContext(TypeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterTypeBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitTypeBound(this);
		}
	}


}



class EnumBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_enumBody;
    }

	enumConstants() {
	    return this.getTypedRuleContext(EnumConstantsContext,0);
	};

	enumBodyDeclarations() {
	    return this.getTypedRuleContext(EnumBodyDeclarationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterEnumBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitEnumBody(this);
		}
	}


}



class EnumConstantsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_enumConstants;
    }

	enumConstant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumConstantContext);
	    } else {
	        return this.getTypedRuleContext(EnumConstantContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterEnumConstants(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitEnumConstants(this);
		}
	}


}



class EnumConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_enumConstant;
    }

	Identifier() {
	    return this.getToken(JavaParser.Identifier, 0);
	};

	annotations() {
	    return this.getTypedRuleContext(AnnotationsContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	classBody() {
	    return this.getTypedRuleContext(ClassBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterEnumConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitEnumConstant(this);
		}
	}


}



class EnumBodyDeclarationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_enumBodyDeclarations;
    }

	classBodyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterEnumBodyDeclarations(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitEnumBodyDeclarations(this);
		}
	}


}



class NormalInterfaceDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_normalInterfaceDeclaration;
    }

	Identifier() {
	    return this.getToken(JavaParser.Identifier, 0);
	};

	interfaceBody() {
	    return this.getTypedRuleContext(InterfaceBodyContext,0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	typeList() {
	    return this.getTypedRuleContext(TypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterNormalInterfaceDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitNormalInterfaceDeclaration(this);
		}
	}


}



class TypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_typeList;
    }

	type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeContext);
	    } else {
	        return this.getTypedRuleContext(TypeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitTypeList(this);
		}
	}


}



class ClassBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_classBody;
    }

	classBodyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterClassBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitClassBody(this);
		}
	}


}



class InterfaceBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_interfaceBody;
    }

	interfaceBodyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceBodyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceBodyDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterInterfaceBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitInterfaceBody(this);
		}
	}


}



class ClassBodyDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_classBodyDeclaration;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	modifiers() {
	    return this.getTypedRuleContext(ModifiersContext,0);
	};

	member() {
	    return this.getTypedRuleContext(MemberContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterClassBodyDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitClassBodyDeclaration(this);
		}
	}


}



class MemberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_member;
    }

	genericMethodDeclaration() {
	    return this.getTypedRuleContext(GenericMethodDeclarationContext,0);
	};

	methodDeclaration() {
	    return this.getTypedRuleContext(MethodDeclarationContext,0);
	};

	fieldDeclaration() {
	    return this.getTypedRuleContext(FieldDeclarationContext,0);
	};

	constructorDeclaration() {
	    return this.getTypedRuleContext(ConstructorDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterMember(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitMember(this);
		}
	}


}



class MethodDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_methodDeclaration;
    }

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	Identifier() {
	    return this.getToken(JavaParser.Identifier, 0);
	};

	formalParameters() {
	    return this.getTypedRuleContext(FormalParametersContext,0);
	};

	methodDeclarationRest() {
	    return this.getTypedRuleContext(MethodDeclarationRestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterMethodDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitMethodDeclaration(this);
		}
	}


}



class MethodDeclarationRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_methodDeclarationRest;
    }

	methodBody() {
	    return this.getTypedRuleContext(MethodBodyContext,0);
	};

	qualifiedNameList() {
	    return this.getTypedRuleContext(QualifiedNameListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterMethodDeclarationRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitMethodDeclarationRest(this);
		}
	}


}



class GenericMethodDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_genericMethodDeclaration;
    }

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	methodDeclaration() {
	    return this.getTypedRuleContext(MethodDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterGenericMethodDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitGenericMethodDeclaration(this);
		}
	}


}



class FieldDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_fieldDeclaration;
    }

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	variableDeclarators() {
	    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterFieldDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitFieldDeclaration(this);
		}
	}


}



class ConstructorDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_constructorDeclaration;
    }

	Identifier() {
	    return this.getToken(JavaParser.Identifier, 0);
	};

	formalParameters() {
	    return this.getTypedRuleContext(FormalParametersContext,0);
	};

	constructorBody() {
	    return this.getTypedRuleContext(ConstructorBodyContext,0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	qualifiedNameList() {
	    return this.getTypedRuleContext(QualifiedNameListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterConstructorDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitConstructorDeclaration(this);
		}
	}


}



class InterfaceBodyDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_interfaceBodyDeclaration;
    }

	modifiers() {
	    return this.getTypedRuleContext(ModifiersContext,0);
	};

	interfaceMemberDecl() {
	    return this.getTypedRuleContext(InterfaceMemberDeclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterInterfaceBodyDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitInterfaceBodyDeclaration(this);
		}
	}


}



class InterfaceMemberDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_interfaceMemberDecl;
    }

	interfaceMethodOrFieldDecl() {
	    return this.getTypedRuleContext(InterfaceMethodOrFieldDeclContext,0);
	};

	interfaceGenericMethodDecl() {
	    return this.getTypedRuleContext(InterfaceGenericMethodDeclContext,0);
	};

	Identifier() {
	    return this.getToken(JavaParser.Identifier, 0);
	};

	voidInterfaceMethodDeclaratorRest() {
	    return this.getTypedRuleContext(VoidInterfaceMethodDeclaratorRestContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterInterfaceMemberDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitInterfaceMemberDecl(this);
		}
	}


}



class InterfaceMethodOrFieldDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_interfaceMethodOrFieldDecl;
    }

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	Identifier() {
	    return this.getToken(JavaParser.Identifier, 0);
	};

	interfaceMethodOrFieldRest() {
	    return this.getTypedRuleContext(InterfaceMethodOrFieldRestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterInterfaceMethodOrFieldDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitInterfaceMethodOrFieldDecl(this);
		}
	}


}



class InterfaceMethodOrFieldRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_interfaceMethodOrFieldRest;
    }

	constantDeclaratorsRest() {
	    return this.getTypedRuleContext(ConstantDeclaratorsRestContext,0);
	};

	interfaceMethodDeclaratorRest() {
	    return this.getTypedRuleContext(InterfaceMethodDeclaratorRestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterInterfaceMethodOrFieldRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitInterfaceMethodOrFieldRest(this);
		}
	}


}



class VoidMethodDeclaratorRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_voidMethodDeclaratorRest;
    }

	formalParameters() {
	    return this.getTypedRuleContext(FormalParametersContext,0);
	};

	methodBody() {
	    return this.getTypedRuleContext(MethodBodyContext,0);
	};

	qualifiedNameList() {
	    return this.getTypedRuleContext(QualifiedNameListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterVoidMethodDeclaratorRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitVoidMethodDeclaratorRest(this);
		}
	}


}



class InterfaceMethodDeclaratorRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_interfaceMethodDeclaratorRest;
    }

	formalParameters() {
	    return this.getTypedRuleContext(FormalParametersContext,0);
	};

	qualifiedNameList() {
	    return this.getTypedRuleContext(QualifiedNameListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterInterfaceMethodDeclaratorRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitInterfaceMethodDeclaratorRest(this);
		}
	}


}



class InterfaceGenericMethodDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_interfaceGenericMethodDecl;
    }

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	Identifier() {
	    return this.getToken(JavaParser.Identifier, 0);
	};

	interfaceMethodDeclaratorRest() {
	    return this.getTypedRuleContext(InterfaceMethodDeclaratorRestContext,0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterInterfaceGenericMethodDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitInterfaceGenericMethodDecl(this);
		}
	}


}



class VoidInterfaceMethodDeclaratorRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_voidInterfaceMethodDeclaratorRest;
    }

	formalParameters() {
	    return this.getTypedRuleContext(FormalParametersContext,0);
	};

	qualifiedNameList() {
	    return this.getTypedRuleContext(QualifiedNameListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterVoidInterfaceMethodDeclaratorRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitVoidInterfaceMethodDeclaratorRest(this);
		}
	}


}



class ConstantDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_constantDeclarator;
    }

	Identifier() {
	    return this.getToken(JavaParser.Identifier, 0);
	};

	constantDeclaratorRest() {
	    return this.getTypedRuleContext(ConstantDeclaratorRestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterConstantDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitConstantDeclarator(this);
		}
	}


}



class VariableDeclaratorsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_variableDeclarators;
    }

	variableDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclaratorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterVariableDeclarators(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitVariableDeclarators(this);
		}
	}


}



class VariableDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_variableDeclarator;
    }

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	variableInitializer() {
	    return this.getTypedRuleContext(VariableInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterVariableDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitVariableDeclarator(this);
		}
	}


}



class ConstantDeclaratorsRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_constantDeclaratorsRest;
    }

	constantDeclaratorRest() {
	    return this.getTypedRuleContext(ConstantDeclaratorRestContext,0);
	};

	constantDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(ConstantDeclaratorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterConstantDeclaratorsRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitConstantDeclaratorsRest(this);
		}
	}


}



class ConstantDeclaratorRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_constantDeclaratorRest;
    }

	variableInitializer() {
	    return this.getTypedRuleContext(VariableInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterConstantDeclaratorRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitConstantDeclaratorRest(this);
		}
	}


}



class VariableDeclaratorIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_variableDeclaratorId;
    }

	Identifier() {
	    return this.getToken(JavaParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterVariableDeclaratorId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitVariableDeclaratorId(this);
		}
	}


}



class VariableInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_variableInitializer;
    }

	arrayInitializer() {
	    return this.getTypedRuleContext(ArrayInitializerContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterVariableInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitVariableInitializer(this);
		}
	}


}



class ArrayInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_arrayInitializer;
    }

	variableInitializer = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableInitializerContext);
	    } else {
	        return this.getTypedRuleContext(VariableInitializerContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterArrayInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitArrayInitializer(this);
		}
	}


}



class ModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_modifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitModifier(this);
		}
	}


}



class PackageOrTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_packageOrTypeName;
    }

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterPackageOrTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitPackageOrTypeName(this);
		}
	}


}



class EnumConstantNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_enumConstantName;
    }

	Identifier() {
	    return this.getToken(JavaParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterEnumConstantName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitEnumConstantName(this);
		}
	}


}



class TypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_typeName;
    }

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitTypeName(this);
		}
	}


}



class TypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_type;
    }

	classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
	};

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitType(this);
		}
	}


}



class ClassOrInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_classOrInterfaceType;
    }

	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.Identifier);
	    } else {
	        return this.getToken(JavaParser.Identifier, i);
	    }
	};


	typeArguments = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeArgumentsContext);
	    } else {
	        return this.getTypedRuleContext(TypeArgumentsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterClassOrInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitClassOrInterfaceType(this);
		}
	}


}



class PrimitiveTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_primitiveType;
    }


	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterPrimitiveType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitPrimitiveType(this);
		}
	}


}



class VariableModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_variableModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterVariableModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitVariableModifier(this);
		}
	}


}



class TypeArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_typeArguments;
    }

	typeArgument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeArgumentContext);
	    } else {
	        return this.getTypedRuleContext(TypeArgumentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterTypeArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitTypeArguments(this);
		}
	}


}



class TypeArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_typeArgument;
    }

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterTypeArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitTypeArgument(this);
		}
	}


}



class QualifiedNameListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_qualifiedNameList;
    }

	qualifiedName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterQualifiedNameList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitQualifiedNameList(this);
		}
	}


}



class FormalParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_formalParameters;
    }

	formalParameterDecls() {
	    return this.getTypedRuleContext(FormalParameterDeclsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterFormalParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitFormalParameters(this);
		}
	}


}



class FormalParameterDeclsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_formalParameterDecls;
    }

	variableModifiers() {
	    return this.getTypedRuleContext(VariableModifiersContext,0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	formalParameterDeclsRest() {
	    return this.getTypedRuleContext(FormalParameterDeclsRestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterFormalParameterDecls(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitFormalParameterDecls(this);
		}
	}


}



class FormalParameterDeclsRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_formalParameterDeclsRest;
    }

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	formalParameterDecls() {
	    return this.getTypedRuleContext(FormalParameterDeclsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterFormalParameterDeclsRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitFormalParameterDeclsRest(this);
		}
	}


}



class MethodBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_methodBody;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterMethodBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitMethodBody(this);
		}
	}


}



class ConstructorBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_constructorBody;
    }

	explicitConstructorInvocation() {
	    return this.getTypedRuleContext(ExplicitConstructorInvocationContext,0);
	};

	blockStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockStatementContext);
	    } else {
	        return this.getTypedRuleContext(BlockStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterConstructorBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitConstructorBody(this);
		}
	}


}



class ExplicitConstructorInvocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_explicitConstructorInvocation;
    }

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	nonWildcardTypeArguments() {
	    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
	};

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterExplicitConstructorInvocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitExplicitConstructorInvocation(this);
		}
	}


}



class QualifiedNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_qualifiedName;
    }

	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.Identifier);
	    } else {
	        return this.getToken(JavaParser.Identifier, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterQualifiedName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitQualifiedName(this);
		}
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_literal;
    }

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	FloatingPointLiteral() {
	    return this.getToken(JavaParser.FloatingPointLiteral, 0);
	};

	CharacterLiteral() {
	    return this.getToken(JavaParser.CharacterLiteral, 0);
	};

	StringLiteral() {
	    return this.getToken(JavaParser.StringLiteral, 0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitLiteral(this);
		}
	}


}



class IntegerLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_integerLiteral;
    }

	HexLiteral() {
	    return this.getToken(JavaParser.HexLiteral, 0);
	};

	OctalLiteral() {
	    return this.getToken(JavaParser.OctalLiteral, 0);
	};

	DecimalLiteral() {
	    return this.getToken(JavaParser.DecimalLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterIntegerLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitIntegerLiteral(this);
		}
	}


}



class BooleanLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_booleanLiteral;
    }


	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitBooleanLiteral(this);
		}
	}


}



class AnnotationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_annotations;
    }

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterAnnotations(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitAnnotations(this);
		}
	}


}



class AnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_annotation;
    }

	annotationName() {
	    return this.getTypedRuleContext(AnnotationNameContext,0);
	};

	elementValuePairs() {
	    return this.getTypedRuleContext(ElementValuePairsContext,0);
	};

	elementValue() {
	    return this.getTypedRuleContext(ElementValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterAnnotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitAnnotation(this);
		}
	}


}



class AnnotationNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_annotationName;
    }

	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaParser.Identifier);
	    } else {
	        return this.getToken(JavaParser.Identifier, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterAnnotationName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitAnnotationName(this);
		}
	}


}



class ElementValuePairsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_elementValuePairs;
    }

	elementValuePair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementValuePairContext);
	    } else {
	        return this.getTypedRuleContext(ElementValuePairContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterElementValuePairs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitElementValuePairs(this);
		}
	}


}



class ElementValuePairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_elementValuePair;
    }

	Identifier() {
	    return this.getToken(JavaParser.Identifier, 0);
	};

	elementValue() {
	    return this.getTypedRuleContext(ElementValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterElementValuePair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitElementValuePair(this);
		}
	}


}



class ElementValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_elementValue;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	elementValueArrayInitializer() {
	    return this.getTypedRuleContext(ElementValueArrayInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterElementValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitElementValue(this);
		}
	}


}



class ElementValueArrayInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_elementValueArrayInitializer;
    }

	elementValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementValueContext);
	    } else {
	        return this.getTypedRuleContext(ElementValueContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterElementValueArrayInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitElementValueArrayInitializer(this);
		}
	}


}



class AnnotationTypeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_annotationTypeDeclaration;
    }

	Identifier() {
	    return this.getToken(JavaParser.Identifier, 0);
	};

	annotationTypeBody() {
	    return this.getTypedRuleContext(AnnotationTypeBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterAnnotationTypeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitAnnotationTypeDeclaration(this);
		}
	}


}



class AnnotationTypeBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_annotationTypeBody;
    }

	annotationTypeElementDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationTypeElementDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationTypeElementDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterAnnotationTypeBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitAnnotationTypeBody(this);
		}
	}


}



class AnnotationTypeElementDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_annotationTypeElementDeclaration;
    }

	modifiers() {
	    return this.getTypedRuleContext(ModifiersContext,0);
	};

	annotationTypeElementRest() {
	    return this.getTypedRuleContext(AnnotationTypeElementRestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterAnnotationTypeElementDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitAnnotationTypeElementDeclaration(this);
		}
	}


}



class AnnotationTypeElementRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_annotationTypeElementRest;
    }

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	annotationMethodOrConstantRest() {
	    return this.getTypedRuleContext(AnnotationMethodOrConstantRestContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	normalInterfaceDeclaration() {
	    return this.getTypedRuleContext(NormalInterfaceDeclarationContext,0);
	};

	enumDeclaration() {
	    return this.getTypedRuleContext(EnumDeclarationContext,0);
	};

	annotationTypeDeclaration() {
	    return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterAnnotationTypeElementRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitAnnotationTypeElementRest(this);
		}
	}


}



class AnnotationMethodOrConstantRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_annotationMethodOrConstantRest;
    }

	annotationMethodRest() {
	    return this.getTypedRuleContext(AnnotationMethodRestContext,0);
	};

	annotationConstantRest() {
	    return this.getTypedRuleContext(AnnotationConstantRestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterAnnotationMethodOrConstantRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitAnnotationMethodOrConstantRest(this);
		}
	}


}



class AnnotationMethodRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_annotationMethodRest;
    }

	Identifier() {
	    return this.getToken(JavaParser.Identifier, 0);
	};

	defaultValue() {
	    return this.getTypedRuleContext(DefaultValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterAnnotationMethodRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitAnnotationMethodRest(this);
		}
	}


}



class AnnotationConstantRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_annotationConstantRest;
    }

	variableDeclarators() {
	    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterAnnotationConstantRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitAnnotationConstantRest(this);
		}
	}


}



class DefaultValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_defaultValue;
    }

	elementValue() {
	    return this.getTypedRuleContext(ElementValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterDefaultValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitDefaultValue(this);
		}
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_block;
    }

	blockStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockStatementContext);
	    } else {
	        return this.getTypedRuleContext(BlockStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitBlock(this);
		}
	}


}



class BlockStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_blockStatement;
    }

	localVariableDeclarationStatement() {
	    return this.getTypedRuleContext(LocalVariableDeclarationStatementContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterBlockStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitBlockStatement(this);
		}
	}


}



class LocalVariableDeclarationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_localVariableDeclarationStatement;
    }

	localVariableDeclaration() {
	    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterLocalVariableDeclarationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitLocalVariableDeclarationStatement(this);
		}
	}


}



class LocalVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_localVariableDeclaration;
    }

	variableModifiers() {
	    return this.getTypedRuleContext(VariableModifiersContext,0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	variableDeclarators() {
	    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterLocalVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitLocalVariableDeclaration(this);
		}
	}


}



class VariableModifiersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_variableModifiers;
    }

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterVariableModifiers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitVariableModifiers(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_statement;
    }

	block = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockContext);
	    } else {
	        return this.getTypedRuleContext(BlockContext,i);
	    }
	};

	ASSERT() {
	    return this.getToken(JavaParser.ASSERT, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	parExpression() {
	    return this.getTypedRuleContext(ParExpressionContext,0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	forControl() {
	    return this.getTypedRuleContext(ForControlContext,0);
	};

	catches() {
	    return this.getTypedRuleContext(CatchesContext,0);
	};

	switchBlock() {
	    return this.getTypedRuleContext(SwitchBlockContext,0);
	};

	Identifier() {
	    return this.getToken(JavaParser.Identifier, 0);
	};

	statementExpression() {
	    return this.getTypedRuleContext(StatementExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitStatement(this);
		}
	}


}



class CatchesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_catches;
    }

	catchClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CatchClauseContext);
	    } else {
	        return this.getTypedRuleContext(CatchClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterCatches(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitCatches(this);
		}
	}


}



class CatchClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_catchClause;
    }

	formalParameter() {
	    return this.getTypedRuleContext(FormalParameterContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterCatchClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitCatchClause(this);
		}
	}


}



class FormalParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_formalParameter;
    }

	variableModifiers() {
	    return this.getTypedRuleContext(VariableModifiersContext,0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterFormalParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitFormalParameter(this);
		}
	}


}



class SwitchBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_switchBlock;
    }

	switchBlockStatementGroup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SwitchBlockStatementGroupContext);
	    } else {
	        return this.getTypedRuleContext(SwitchBlockStatementGroupContext,i);
	    }
	};

	switchLabel = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SwitchLabelContext);
	    } else {
	        return this.getTypedRuleContext(SwitchLabelContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterSwitchBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitSwitchBlock(this);
		}
	}


}



class SwitchBlockStatementGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_switchBlockStatementGroup;
    }

	switchLabel = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SwitchLabelContext);
	    } else {
	        return this.getTypedRuleContext(SwitchLabelContext,i);
	    }
	};

	blockStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockStatementContext);
	    } else {
	        return this.getTypedRuleContext(BlockStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterSwitchBlockStatementGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitSwitchBlockStatementGroup(this);
		}
	}


}



class SwitchLabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_switchLabel;
    }

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	enumConstantName() {
	    return this.getTypedRuleContext(EnumConstantNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterSwitchLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitSwitchLabel(this);
		}
	}


}



class ForControlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_forControl;
    }

	enhancedForControl() {
	    return this.getTypedRuleContext(EnhancedForControlContext,0);
	};

	forInit() {
	    return this.getTypedRuleContext(ForInitContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	forUpdate() {
	    return this.getTypedRuleContext(ForUpdateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterForControl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitForControl(this);
		}
	}


}



class ForInitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_forInit;
    }

	localVariableDeclaration() {
	    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterForInit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitForInit(this);
		}
	}


}



class EnhancedForControlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_enhancedForControl;
    }

	variableModifiers() {
	    return this.getTypedRuleContext(VariableModifiersContext,0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	Identifier() {
	    return this.getToken(JavaParser.Identifier, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterEnhancedForControl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitEnhancedForControl(this);
		}
	}


}



class ForUpdateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_forUpdate;
    }

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterForUpdate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitForUpdate(this);
		}
	}


}



class ParExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_parExpression;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterParExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitParExpression(this);
		}
	}


}



class ExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_expressionList;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitExpressionList(this);
		}
	}


}



class StatementExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_statementExpression;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterStatementExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitStatementExpression(this);
		}
	}


}



class ConstantExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_constantExpression;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterConstantExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitConstantExpression(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_expression;
    }

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	creator() {
	    return this.getTypedRuleContext(CreatorContext,0);
	};

	Identifier() {
	    return this.getToken(JavaParser.Identifier, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	explicitGenericInvocation() {
	    return this.getTypedRuleContext(ExplicitGenericInvocationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitExpression(this);
		}
	}


}



class PrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_primary;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	Identifier() {
	    return this.getToken(JavaParser.Identifier, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitPrimary(this);
		}
	}


}



class CreatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_creator;
    }

	nonWildcardTypeArguments() {
	    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
	};

	createdName() {
	    return this.getTypedRuleContext(CreatedNameContext,0);
	};

	classCreatorRest() {
	    return this.getTypedRuleContext(ClassCreatorRestContext,0);
	};

	arrayCreatorRest() {
	    return this.getTypedRuleContext(ArrayCreatorRestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterCreator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitCreator(this);
		}
	}


}



class CreatedNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_createdName;
    }

	classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
	};

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterCreatedName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitCreatedName(this);
		}
	}


}



class InnerCreatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_innerCreator;
    }

	Identifier() {
	    return this.getToken(JavaParser.Identifier, 0);
	};

	classCreatorRest() {
	    return this.getTypedRuleContext(ClassCreatorRestContext,0);
	};

	nonWildcardTypeArguments() {
	    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterInnerCreator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitInnerCreator(this);
		}
	}


}



class ExplicitGenericInvocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_explicitGenericInvocation;
    }

	nonWildcardTypeArguments() {
	    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
	};

	Identifier() {
	    return this.getToken(JavaParser.Identifier, 0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterExplicitGenericInvocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitExplicitGenericInvocation(this);
		}
	}


}



class ArrayCreatorRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_arrayCreatorRest;
    }

	arrayInitializer() {
	    return this.getTypedRuleContext(ArrayInitializerContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterArrayCreatorRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitArrayCreatorRest(this);
		}
	}


}



class ClassCreatorRestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_classCreatorRest;
    }

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	classBody() {
	    return this.getTypedRuleContext(ClassBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterClassCreatorRest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitClassCreatorRest(this);
		}
	}


}



class NonWildcardTypeArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_nonWildcardTypeArguments;
    }

	typeList() {
	    return this.getTypedRuleContext(TypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterNonWildcardTypeArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitNonWildcardTypeArguments(this);
		}
	}


}



class ArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaParser.RULE_arguments;
    }

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.enterArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaListener ) {
	        listener.exitArguments(this);
		}
	}


}




JavaParser.CompilationUnitContext = CompilationUnitContext; 
JavaParser.PackageDeclarationContext = PackageDeclarationContext; 
JavaParser.ImportDeclarationContext = ImportDeclarationContext; 
JavaParser.TypeDeclarationContext = TypeDeclarationContext; 
JavaParser.ClassDeclarationContext = ClassDeclarationContext; 
JavaParser.EnumDeclarationContext = EnumDeclarationContext; 
JavaParser.InterfaceDeclarationContext = InterfaceDeclarationContext; 
JavaParser.ClassOrInterfaceModifierContext = ClassOrInterfaceModifierContext; 
JavaParser.ModifiersContext = ModifiersContext; 
JavaParser.TypeParametersContext = TypeParametersContext; 
JavaParser.TypeParameterContext = TypeParameterContext; 
JavaParser.TypeBoundContext = TypeBoundContext; 
JavaParser.EnumBodyContext = EnumBodyContext; 
JavaParser.EnumConstantsContext = EnumConstantsContext; 
JavaParser.EnumConstantContext = EnumConstantContext; 
JavaParser.EnumBodyDeclarationsContext = EnumBodyDeclarationsContext; 
JavaParser.NormalInterfaceDeclarationContext = NormalInterfaceDeclarationContext; 
JavaParser.TypeListContext = TypeListContext; 
JavaParser.ClassBodyContext = ClassBodyContext; 
JavaParser.InterfaceBodyContext = InterfaceBodyContext; 
JavaParser.ClassBodyDeclarationContext = ClassBodyDeclarationContext; 
JavaParser.MemberContext = MemberContext; 
JavaParser.MethodDeclarationContext = MethodDeclarationContext; 
JavaParser.MethodDeclarationRestContext = MethodDeclarationRestContext; 
JavaParser.GenericMethodDeclarationContext = GenericMethodDeclarationContext; 
JavaParser.FieldDeclarationContext = FieldDeclarationContext; 
JavaParser.ConstructorDeclarationContext = ConstructorDeclarationContext; 
JavaParser.InterfaceBodyDeclarationContext = InterfaceBodyDeclarationContext; 
JavaParser.InterfaceMemberDeclContext = InterfaceMemberDeclContext; 
JavaParser.InterfaceMethodOrFieldDeclContext = InterfaceMethodOrFieldDeclContext; 
JavaParser.InterfaceMethodOrFieldRestContext = InterfaceMethodOrFieldRestContext; 
JavaParser.VoidMethodDeclaratorRestContext = VoidMethodDeclaratorRestContext; 
JavaParser.InterfaceMethodDeclaratorRestContext = InterfaceMethodDeclaratorRestContext; 
JavaParser.InterfaceGenericMethodDeclContext = InterfaceGenericMethodDeclContext; 
JavaParser.VoidInterfaceMethodDeclaratorRestContext = VoidInterfaceMethodDeclaratorRestContext; 
JavaParser.ConstantDeclaratorContext = ConstantDeclaratorContext; 
JavaParser.VariableDeclaratorsContext = VariableDeclaratorsContext; 
JavaParser.VariableDeclaratorContext = VariableDeclaratorContext; 
JavaParser.ConstantDeclaratorsRestContext = ConstantDeclaratorsRestContext; 
JavaParser.ConstantDeclaratorRestContext = ConstantDeclaratorRestContext; 
JavaParser.VariableDeclaratorIdContext = VariableDeclaratorIdContext; 
JavaParser.VariableInitializerContext = VariableInitializerContext; 
JavaParser.ArrayInitializerContext = ArrayInitializerContext; 
JavaParser.ModifierContext = ModifierContext; 
JavaParser.PackageOrTypeNameContext = PackageOrTypeNameContext; 
JavaParser.EnumConstantNameContext = EnumConstantNameContext; 
JavaParser.TypeNameContext = TypeNameContext; 
JavaParser.TypeContext = TypeContext; 
JavaParser.ClassOrInterfaceTypeContext = ClassOrInterfaceTypeContext; 
JavaParser.PrimitiveTypeContext = PrimitiveTypeContext; 
JavaParser.VariableModifierContext = VariableModifierContext; 
JavaParser.TypeArgumentsContext = TypeArgumentsContext; 
JavaParser.TypeArgumentContext = TypeArgumentContext; 
JavaParser.QualifiedNameListContext = QualifiedNameListContext; 
JavaParser.FormalParametersContext = FormalParametersContext; 
JavaParser.FormalParameterDeclsContext = FormalParameterDeclsContext; 
JavaParser.FormalParameterDeclsRestContext = FormalParameterDeclsRestContext; 
JavaParser.MethodBodyContext = MethodBodyContext; 
JavaParser.ConstructorBodyContext = ConstructorBodyContext; 
JavaParser.ExplicitConstructorInvocationContext = ExplicitConstructorInvocationContext; 
JavaParser.QualifiedNameContext = QualifiedNameContext; 
JavaParser.LiteralContext = LiteralContext; 
JavaParser.IntegerLiteralContext = IntegerLiteralContext; 
JavaParser.BooleanLiteralContext = BooleanLiteralContext; 
JavaParser.AnnotationsContext = AnnotationsContext; 
JavaParser.AnnotationContext = AnnotationContext; 
JavaParser.AnnotationNameContext = AnnotationNameContext; 
JavaParser.ElementValuePairsContext = ElementValuePairsContext; 
JavaParser.ElementValuePairContext = ElementValuePairContext; 
JavaParser.ElementValueContext = ElementValueContext; 
JavaParser.ElementValueArrayInitializerContext = ElementValueArrayInitializerContext; 
JavaParser.AnnotationTypeDeclarationContext = AnnotationTypeDeclarationContext; 
JavaParser.AnnotationTypeBodyContext = AnnotationTypeBodyContext; 
JavaParser.AnnotationTypeElementDeclarationContext = AnnotationTypeElementDeclarationContext; 
JavaParser.AnnotationTypeElementRestContext = AnnotationTypeElementRestContext; 
JavaParser.AnnotationMethodOrConstantRestContext = AnnotationMethodOrConstantRestContext; 
JavaParser.AnnotationMethodRestContext = AnnotationMethodRestContext; 
JavaParser.AnnotationConstantRestContext = AnnotationConstantRestContext; 
JavaParser.DefaultValueContext = DefaultValueContext; 
JavaParser.BlockContext = BlockContext; 
JavaParser.BlockStatementContext = BlockStatementContext; 
JavaParser.LocalVariableDeclarationStatementContext = LocalVariableDeclarationStatementContext; 
JavaParser.LocalVariableDeclarationContext = LocalVariableDeclarationContext; 
JavaParser.VariableModifiersContext = VariableModifiersContext; 
JavaParser.StatementContext = StatementContext; 
JavaParser.CatchesContext = CatchesContext; 
JavaParser.CatchClauseContext = CatchClauseContext; 
JavaParser.FormalParameterContext = FormalParameterContext; 
JavaParser.SwitchBlockContext = SwitchBlockContext; 
JavaParser.SwitchBlockStatementGroupContext = SwitchBlockStatementGroupContext; 
JavaParser.SwitchLabelContext = SwitchLabelContext; 
JavaParser.ForControlContext = ForControlContext; 
JavaParser.ForInitContext = ForInitContext; 
JavaParser.EnhancedForControlContext = EnhancedForControlContext; 
JavaParser.ForUpdateContext = ForUpdateContext; 
JavaParser.ParExpressionContext = ParExpressionContext; 
JavaParser.ExpressionListContext = ExpressionListContext; 
JavaParser.StatementExpressionContext = StatementExpressionContext; 
JavaParser.ConstantExpressionContext = ConstantExpressionContext; 
JavaParser.ExpressionContext = ExpressionContext; 
JavaParser.PrimaryContext = PrimaryContext; 
JavaParser.CreatorContext = CreatorContext; 
JavaParser.CreatedNameContext = CreatedNameContext; 
JavaParser.InnerCreatorContext = InnerCreatorContext; 
JavaParser.ExplicitGenericInvocationContext = ExplicitGenericInvocationContext; 
JavaParser.ArrayCreatorRestContext = ArrayCreatorRestContext; 
JavaParser.ClassCreatorRestContext = ClassCreatorRestContext; 
JavaParser.NonWildcardTypeArgumentsContext = NonWildcardTypeArgumentsContext; 
JavaParser.ArgumentsContext = ArgumentsContext; 
